{"version":3,"sources":["Building.ts","BuildingContext.tsx","OpenDialog.tsx","BuildingSummary.tsx","EditorScene.tsx","App.tsx","index.tsx"],"names":["ParamArrayFromYAML","params_data","p","param_name","param_data","param","name","type_idx","value","push","VertexFromYAML","vertex_data","x","y","params","WallFromYAML","wall_data","start_idx","end_idx","LaneFromYAML","lane_data","LevelFromYAML","level_name","level_data","level","elevation","vertices","walls","lanes","BuildingDefault","filename","yaml","levels","lifts","crowd_sim","undefined","BuildingParseYAML","yaml_text","building","YAML","parse","console","log","BuildingLoadFromServer","a","fetch","then","response","text","BuildingContext","React","createContext","updateBuilding","nextBuilding","useStyles","makeStyles","theme","directoryButton","fontSize","typography","h5","textDecoration","dialog","backgroundColor","palette","background","paper","OpenDialog","props","classes","useContext","useState","buildingFileNames","setBuildingFileNames","directoryHandle","setDirectoryHandle","onDirectoryClick","window","showDirectoryPicker","handle","entry","endsWith","previous","values","loadFile","getFileHandle","fileHandle","getFile","file","onOpen","Dialog","open","onClose","onCancel","DialogTitle","DialogContent","className","Button","variant","color","onClick","length","List","subheader","ListSubheader","component","map","ListItem","button","ListItemIcon","ListItemText","primary","e","buildingFileList","DialogActions","BuildingSummary","node_idx","renderLevel","TreeItem","nodeId","String","label","vertex","renderVertex","wall","renderWall","TreeView","defaultCollapseIcon","defaultExpandIcon","defaultExpanded","EditorScene","z","position","scale","rotation","THREE","Math","PI","args","v1","v2","cx","cy","dx","dy","len","sqrt","xyrot","atan2","lane","renderLane","floor","Controls","camera","useThree","up","DefaultUp","MapControls","enableDamping","frameloop","root","flexGrow","minHeight","flex","menuButton","marginLeft","marginRight","toolbarMargin","mixins","toolbar","workingArea","height","App","menuAnchorEl","setMenuAnchorEl","isOpenDialogOpen","setIsOpenDialogOpen","Provider","AppBar","IconButton","aria-label","currentTarget","keepMounted","anchorEl","Boolean","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","Typography","Grid","container","spacing","item","xs","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0b680f6.chunk.js","sourcesContent":["//const yaml = require('js-yaml');\nimport YAML from 'yaml'\n\nexport interface Param {\n  type_idx: number;\n  name: string;\n  value: any;\n}\n\nexport interface Lane {\n  start_idx: number;\n  end_idx: number;\n  params: Param[];\n}\n\nexport interface Wall {\n  start_idx: number;\n  end_idx: number;\n  params: Param[];\n}\n\nexport interface Vertex {\n  x: number;\n  y: number;\n  name: string;\n  params: Param[];\n}\n\nconst ParamArrayFromYAML = (params_data: any | null) => {\n  if (!params_data)\n    return [];\n  const p = [];\n  for (const param_name in params_data) {\n    const param_data = params_data[param_name];\n    const param: Param = {\n      name: param_name,\n      type_idx: param_data[0],\n      value: param_data[1],\n    };\n    p.push(param);\n  }\n  return p;\n}\n\nconst VertexFromYAML = (vertex_data: any): Vertex => {\n  const vertex: Vertex = {\n    x: vertex_data[0],\n    y: -vertex_data[1],\n    name: vertex_data[3],\n    params: ParamArrayFromYAML(vertex_data[4])\n  };\n  return vertex;\n}\n\nconst WallFromYAML = (wall_data: any): Wall => {\n  const wall: Wall = {\n    start_idx: wall_data[0],\n    end_idx: wall_data[1],\n    params: ParamArrayFromYAML(wall_data[2]),\n  }\n  return wall;\n}\n\nconst LaneFromYAML = (lane_data: any): Wall => {\n  const lane: Lane = {\n    start_idx: lane_data[0],\n    end_idx: lane_data[1],\n    params: ParamArrayFromYAML(lane_data[2]),\n  }\n  return lane;\n}\n\n\nexport interface Level {\n  name: string;\n  elevation: number;\n  vertices: Vertex[];\n  walls: Wall[];\n  lanes: Lane[];\n}\n\nconst LevelFromYAML = (level_name: string, level_data: any): Level => {\n  const level: Level = {\n    name: level_name,\n    elevation: 0,\n    vertices: [],\n    walls: [],\n    lanes: []\n  };\n  level.elevation = level_data['elevation'];\n  for (const vertex_data of level_data['vertices']) {\n    level.vertices.push(VertexFromYAML(vertex_data));\n  }\n  for (const wall_data of level_data['walls']) {\n    level.walls.push(WallFromYAML(wall_data));\n  }\n  for (const lane_data of level_data['lanes']) {\n    level.lanes.push(LaneFromYAML(lane_data));\n  }\n  return level;\n}\n\nexport interface Lift {\n  name: string;\n}\n\nexport interface Building {\n  name: string;\n  filename: string;\n  yaml: string;\n  levels: Level[];\n  lifts: Lift[];\n  crowd_sim: any;\n}\n\nexport const BuildingDefault: Building = {\n  name: '',\n  filename: '',\n  yaml: '',\n  levels: [],\n  lifts: [],\n  crowd_sim: undefined,\n}\n\nexport const BuildingParseYAML = (filename: string, yaml_text: string): Building => {\n  let building = {} as Building;\n  building.filename = filename;\n  building.yaml = yaml_text;\n  const y = YAML.parse(yaml_text);\n  building.name = y['name'];\n  building.crowd_sim = y['crowd_sim'];\n  building.levels = [];\n  for (const level_name in y['levels']) {\n    const level_data = y['levels'][level_name];\n    building.levels.push(LevelFromYAML(level_name, level_data));\n  }\n  console.log('parsed it');\n  return building;\n}\n\nexport const BuildingLoadFromServer = async (): Promise<Building> => {\n  return fetch('http://localhost:8000/map_file')\n    .then(response => response.text())\n    .then(text => BuildingParseYAML('foo', text));\n}\n","import React from 'react';\nimport { Building, BuildingDefault } from './Building';\n\nexport const BuildingContext = React.createContext({\n  building: BuildingDefault,\n  updateBuilding: (nextBuilding: Building) => {}\n});\n","import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport List from '@material-ui/core/List';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MapIcon from '@material-ui/icons/Map';\n\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { BuildingParseYAML } from './Building';\nimport { BuildingContext } from './BuildingContext';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  directoryButton: {\n    fontSize: theme.typography.h5.fontSize\n  },\n  filename: {\n    fontSize: theme.typography.h5.fontSize,\n    textDecoration: 'underline'\n  },\n  dialog: {\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\ntype OpenDialogProps = {\n  open: boolean;\n  onOpen: () => void; //filename: string, handle: FileSystemDirectoryHandle | undefined) => void;\n  onCancel: () => void;\n};\n\nexport default function OpenDialog(props: OpenDialogProps): JSX.Element {\n  const classes = useStyles(props);\n  const { updateBuilding } = React.useContext(BuildingContext);\n  const [buildingFileNames, setBuildingFileNames] = React.useState<string[]>([]);\n  const [directoryHandle, setDirectoryHandle] = React.useState<FileSystemDirectoryHandle>();\n\n  const onDirectoryClick = async () => {\n    setBuildingFileNames([]);\n    const handle = await window.showDirectoryPicker();\n    await setDirectoryHandle(handle);\n    for await (const entry of handle.values()) {\n      if (entry.name.endsWith('.building.yaml'))\n        setBuildingFileNames(previous => [...previous, entry.name]);\n    }\n  }\n\n  const loadFile = async(filename: string) => {\n    if (directoryHandle) {\n      const fileHandle = await directoryHandle.getFileHandle(filename);\n      const file = await fileHandle.getFile();\n      const text = await file.text();\n      updateBuilding(BuildingParseYAML(filename, text));\n    }\n    props.onOpen();\n  }\n\n  const buildingFileList = () => {\n    if (buildingFileNames.length > 0)\n      return (\n        <div>\n          <List\n            subheader={\n              <ListSubheader component=\"div\">\n                Available Files\n              </ListSubheader>\n            }\n          >\n            {buildingFileNames.map((filename) =>\n              <ListItem button key={filename}>\n                <ListItemIcon>\n                  <MapIcon />\n                </ListItemIcon>\n                <ListItemText primary={filename} onClick={e => {loadFile(filename)}} />\n              </ListItem>)\n            }\n          </List>\n        </div>\n      );\n  }\n\n  return (\n    <Dialog open={props.open} onClose={props.onCancel}>\n      <DialogTitle>Open Building Map</DialogTitle>\n      <DialogContent className={classes.dialog}>\n        <Button variant=\"contained\" color=\"primary\" onClick={onDirectoryClick}>\n          Select Directory...\n        </Button>\n        {buildingFileList()}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={props.onCancel} color=\"primary\">\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React from 'react';\nimport { Level, Vertex, Wall } from './Building';\nimport { BuildingContext } from './BuildingContext';\nimport TreeView from '@material-ui/lab/TreeView';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\n\nexport default function BuildingSummary(): JSX.Element {\n  const { building } = React.useContext(BuildingContext);\n  if (!building.filename)\n    return (\n      <p>No building loaded.</p>\n    );\n\n  let node_idx = 10;\n  \n  const renderVertex = (vertex: Vertex): JSX.Element => {\n    node_idx = node_idx + 1;\n    let label = \"(\" + vertex.x + \", \" + vertex.y + \")\";\n    if (vertex.name)\n      label += \" name: \" + vertex.name;\n    if (vertex.params.length) {\n      for (const param of vertex.params) {\n        label += ` ${param.name}=${param.value}`;\n      }\n    }\n    return (\n      <TreeItem\n        key={node_idx}\n        nodeId={String(node_idx)}\n        label={label} />\n    );\n  }\n\n  const renderWall = (wall: Wall): JSX.Element => {\n    node_idx = node_idx + 1;\n    let label = `(${wall.start_idx} => ${wall.end_idx})`;\n    return(\n      <TreeItem\n        key={node_idx}\n        nodeId={String(node_idx)}\n        label={label} />\n    );\n  }\n\n  const renderLevel = (level: Level): JSX.Element => {\n    node_idx = node_idx + 3;\n    return (\n      <TreeItem key={node_idx-3} nodeId={String(node_idx-3)} label={level.name}>\n        <TreeItem key={node_idx-2} nodeId={String(node_idx-2)} label=\"vertices\">\n          {level.vertices.map((vertex) => renderVertex(vertex))}\n        </TreeItem>\n        <TreeItem key={node_idx-1} nodeId={String(node_idx-1)} label=\"walls\">\n          {level.walls.map((wall) => renderWall(wall))}\n        </TreeItem>\n      </TreeItem>\n    );\n  }\n\n  return (\n    <TreeView\n      defaultCollapseIcon={<ExpandMoreIcon />}\n      defaultExpandIcon={<ChevronRightIcon />}\n      defaultExpanded={[\"2\"]}\n    >\n      <TreeItem nodeId=\"0\" label={\"name: \" + building.name} />\n      <TreeItem nodeId=\"1\" label={\"filename: \" + building.filename} />\n      <TreeItem nodeId=\"2\" label=\"levels\">\n        {building.levels.map((level) => renderLevel(level))}\n      </TreeItem>\n    </TreeView>\n  );\n}\n","import * as THREE from 'three'\nimport { Canvas, useThree } from '@react-three/fiber'\n//import React, { useRef, useState } from 'react'\nimport React from 'react'\nimport { MapControls } from '@react-three/drei'\nimport { Lane, Level, Vertex, Wall } from './Building';\nimport { BuildingContext } from './BuildingContext';\n\n/*\nfunction Box(props: JSX.IntrinsicElements['mesh']) {\n  const mesh = useRef<THREE.Mesh>(null!)\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={active ? 1.0 : 0.5}\n      onClick={(event) => setActive(!active)}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}\n    >\n      <boxGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\n*/\n\nexport default function EditorScene(): JSX.Element {\n  const { building } = React.useContext(BuildingContext);\n\n  const renderVertex = (vertex: Vertex, elevation: number): JSX.Element => {\n    const x = vertex.x / 50.0;\n    const y = vertex.y / 50.0;\n    // todo: consider troika-three-text for rendering the labels?\n    return (\n      <mesh\n        position={[x, y, 0.25 + elevation]}\n        scale={1.0}\n        rotation={new THREE.Euler(Math.PI / 2, 0, 0)}\n      >\n        <cylinderGeometry args={[0.3, 0.3, 0.2, 8]} />\n        <meshStandardMaterial color={'green'} />\n      </mesh>\n    );\n  }\n\n  const renderWall = (wall: Wall, vertices: Vertex[], elevation: number): JSX.Element => {\n    const v1 = vertices[wall.start_idx];\n    const v2 = vertices[wall.end_idx];\n    const cx = (v1.x + v2.x) / 2 / 50;\n    const cy = (v1.y + v2.y) / 2 / 50;\n    const dx = v2.x - v1.x;\n    const dy = v2.y - v1.y;\n    const len = Math.sqrt(dx*dx + dy*dy) / 50;\n    const xyrot = Math.atan2(dy, dx);\n\n    return (\n      <mesh\n        position={[cx, cy, 1.0 + elevation]}\n        rotation={new THREE.Euler(0, 0, xyrot)}\n        scale={1.0}\n      >\n        <boxGeometry args={[len, 0.1, 2]} />\n        <meshStandardMaterial color={'#8080d0'} />\n      </mesh>\n    );\n  }\n\n  const renderLane = (lane: Lane, vertices: Vertex[], elevation: number): JSX.Element => {\n    const v1 = vertices[lane.start_idx];\n    const v2 = vertices[lane.end_idx];\n    const cx = (v1.x + v2.x) / 2 / 50;\n    const cy = (v1.y + v2.y) / 2 / 50;\n    const dx = v2.x - v1.x;\n    const dy = v2.y - v1.y;\n    const len = Math.sqrt(dx*dx + dy*dy) / 50;\n    const xyrot = Math.atan2(dy, dx);\n\n    return (\n      <mesh\n        position={[cx, cy, 0.0 + elevation]}\n        rotation={new THREE.Euler(0, 0, xyrot)}\n        scale={1.0}\n      >\n        <boxGeometry args={[len, 1.0, 0.1]} />\n        <meshStandardMaterial color={'#d08080'} />\n      </mesh>\n    );\n  }\n\n  const renderLevel = (level: Level): JSX.Element[] => {\n    const z = level.elevation / 2;\n    const vertices = level.vertices.map((vertex) => renderVertex(vertex, z));\n    const walls = level.walls.map((wall) => renderWall(wall, level.vertices, z));\n    const lanes = level.lanes.map((lane) => renderLane(lane, level.vertices, z));\n    const floor = (\n      <gridHelper\n        args={[100, 100]}\n        rotation={new THREE.Euler(Math.PI / 2, 0, 0)}\n        position={new THREE.Vector3(50, -50, z)}/>\n    );\n    return [...vertices, ...walls, ...lanes, floor];\n  }\n\n  const Controls = (): JSX.Element => {\n    const camera = useThree(({ camera }) => camera);\n    camera.up = new THREE.Vector3(0, 0, 1);\n    THREE.Object3D.DefaultUp = new THREE.Vector3(0, 0, 1);\n    return <MapControls enableDamping={false} camera={camera} />\n  }\n\n  return (\n    <Canvas\n      frameloop=\"demand\"\n      camera={{ position: [3, -10, 5] }}\n    >\n      <Controls />\n      <axesHelper />\n      <ambientLight />\n      <pointLight position={[10, 10, 10]} />\n      {building.levels.map((level) => renderLevel(level))}\n    </Canvas>\n  )\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport ToolBar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Grid from '@material-ui/core/Grid';\n\nimport OpenDialog from './OpenDialog';\nimport BuildingSummary from './BuildingSummary';\nimport { BuildingContext } from './BuildingContext';\nimport { BuildingDefault, BuildingLoadFromServer } from './Building';\nimport EditorScene from './EditorScene';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    minHeight: '100vh',\n  },\n  flex: {\n    flex: 1\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20\n  },\n  toolbarMargin: theme.mixins.toolbar,\n  workingArea: {\n    backgroundColor: \"black\",\n    height: `calc(100vh - 64px)`,\n  },\n}));\n\nexport default function App(props: React.PropsWithChildren<{}>): JSX.Element {\n  const [menuAnchorEl, setMenuAnchorEl] = React.useState(null);\n  const [isOpenDialogOpen, setIsOpenDialogOpen] = React.useState(false);\n  const [ building, updateBuilding ] = React.useState(BuildingDefault);\n\n  const classes = useStyles(props);\n\n  return (\n    <div className={classes.root}>\n      <BuildingContext.Provider value={{ building, updateBuilding }}>\n        <AppBar position=\"fixed\">\n          <ToolBar>\n            <IconButton\n              className={classes.menuButton}\n              color=\"inherit\"\n              aria-label=\"Menu\"\n              onClick={(e: any) => { setMenuAnchorEl(e.currentTarget); }}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Menu\n              keepMounted\n              anchorEl={menuAnchorEl}\n              open={Boolean(menuAnchorEl)}\n              onClose={() => setMenuAnchorEl(null)}\n              getContentAnchorEl={null}\n              anchorOrigin={{vertical: 'bottom', horizontal: 'center'}}\n              transformOrigin={{vertical: 'top', horizontal: 'center'}}\n            >\n              <MenuItem\n                onClick={async () => {\n                  updateBuilding(await BuildingLoadFromServer());\n                  setMenuAnchorEl(null);\n                }}\n              >\n                Open map from localhost server\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  setIsOpenDialogOpen(true);\n                  setMenuAnchorEl(null);\n                }}\n              >\n                Open map from local file...\n              </MenuItem>\n            </Menu>\n            <Typography variant=\"h5\" color=\"inherit\" className={classes.flex}>\n              Traffic Editor\n            </Typography>\n          </ToolBar>\n        </AppBar>\n        <div className={classes.toolbarMargin} />\n        <OpenDialog\n          open={isOpenDialogOpen}\n          onOpen={() => setIsOpenDialogOpen(false)}\n          onCancel={() => setIsOpenDialogOpen(false)}\n        />\n        <Grid container spacing={0}>\n          <Grid item xs={3}>\n            <BuildingSummary />\n          </Grid>\n          <Grid item xs={9} className={classes.workingArea}>\n            <EditorScene />\n          </Grid>\n        </Grid>\n      </BuildingContext.Provider>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}