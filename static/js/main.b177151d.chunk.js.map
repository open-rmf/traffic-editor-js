{"version":3,"sources":["EditorStore.ts","BuildingSummary.tsx","SceneVertex.tsx","SceneWall.tsx","SceneFloor.tsx","SceneLane.tsx","SceneLevel.tsx","EditorScene.tsx","PropertyEditor.tsx","YAMLParser.ts","OpenDialog.tsx","MainMenu.tsx","App.tsx","index.tsx"],"names":["useStore","create","set","building","name","levels","params","uuid","selection","setSelection","newSelection","state","clearSelection","editorMode","setEditorMode","newEditorMode","BuildingSummary","style","margin","renderParam","param","TreeItem","nodeId","label","value","renderLevel","level","vertices","map","vertex","x","y","onClick","event","renderVertex","lanes","lane","start_idx","end_idx","renderLane","walls","wall","renderWall","floors","floor","vertex_indices","idx","toString","join","renderFloor","TreeView","defaultCollapseIcon","defaultExpandIcon","SceneVertex","props","color","position","elevation","scale","rotation","THREE","Math","PI","stopPropagation","console","log","args","SceneWall","v1","vertex_start","v2","vertex_end","cx","cy","dx","dy","len","sqrt","xyrot","atan2","React","useMemo","setRGB","SceneFloor","shape","started","v","lineTo","moveTo","v0","SceneLane","SceneLevel","z","EditorScene","Controls","perspective_camera","useRef","orthographic_camera","DefaultUp","bb","vec_min","Infinity","vec_max","computeBoundingBox","target","min","max","PerspectiveCamera","ref","fov","makeDefault","OrthographicCamera","zoom","MapControls","enableDamping","camera","current","mouseButtons","LEFT","MIDDLE","PAN","RIGHT","ROTATE","touches","ONE","TWO","OrbitControls","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","frameloop","onPointerMissed","useStyles","makeStyles","theme","noSelectionDiv","table","padding","tableHead","tableHeadRow","borderBottomStyle","borderBottom","borderBottomColor","palette","primary","main","tableHeadCell","fontWeight","paddingLeft","tableCell","PropertyEditor","classes","className","rows","TableRow","TableCell","Table","TableHead","TableBody","ParamArrayFactory","params_data","Array","param_name","param_data","p","type_idx","generate_uuid","push","LevelFactory","level_name","level_data","vertex_data","wall_data","floor_data","vertex_idx","lane_data","BuildingFactory","yaml_text","yaml","YAML","parse","YAMLParser","setState","YAMLRetriever","uri","a","fetch","then","response","text","YAMLRetrieveDemo","process","directoryButton","fontSize","typography","h5","filename","textDecoration","dialog","backgroundColor","background","paper","OpenDialog","useState","buildingFileNames","setBuildingFileNames","directoryHandle","setDirectoryHandle","onDirectoryClick","window","showDirectoryPicker","handle","entry","endsWith","previous","values","loadFile","getFileHandle","fileHandle","getFile","file","onOpen","Dialog","open","onClose","onCancel","DialogTitle","DialogContent","Button","variant","length","List","subheader","ListSubheader","component","ListItem","button","ListItemIcon","ListItemText","e","buildingFileList","DialogActions","StyledToggleButtonGroup","withStyles","root","light","spacing","grouped","contrastText","dark","ToggleButtonGroup","flexGrow","minHeight","flex","menuButton","marginLeft","marginRight","toolbarMargin","mixins","toolbar","workingArea","height","mainGrid","gridLeftColumn","borderRight","borderRightStyle","borderRightColor","propertyGridItem","borderTop","borderTopStyle","borderTopColor","MainMenu","menuAnchorEl","setMenuAnchorEl","isOpenDialogOpen","setIsOpenDialogOpen","AppBar","IconButton","aria-label","currentTarget","keepMounted","anchorEl","Boolean","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","transitionDuration","MenuItem","Typography","size","exclusive","onChange","newMode","ToggleButton","App","Grid","container","xs","direction","item","overflow","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b177151d.chunk.js","sourcesContent":["import create from 'zustand';\n\nexport interface EditorParam {\n  type_idx: number,\n  name: string,\n  value: any,\n  uuid: string\n}\n\nexport interface EditorObject {\n  uuid: string,\n  params: EditorParam[],\n}\n\nexport interface EditorVertex extends EditorObject {\n  x: number,\n  y: number,\n  name: string,\n}\n\nexport interface EditorWall extends EditorObject {\n  start_idx: number,\n  end_idx: number,\n}\n\nexport interface EditorLane extends EditorObject {\n  start_idx: number,\n  end_idx: number,\n}\n\nexport interface EditorFloor extends EditorObject {\n  vertex_indices: number[],\n}\n\nexport interface EditorLevel extends EditorObject {\n  name: string,\n  elevation: number,\n  vertices: EditorVertex[],\n  walls: EditorWall[],\n  floors: EditorFloor[],\n  lanes: EditorLane[],\n}\n\nexport interface EditorBuilding extends EditorObject {\n  name: string,\n  levels: EditorLevel[],\n}\n\nexport interface EditorStoreState {\n  building: EditorBuilding,\n  selection: EditorObject | null,\n  editorMode: string,\n  setSelection: (newSelection: EditorObject) => void,\n  clearSelection: () => void,\n  setEditorMode: (newEditorMode: string) => void,\n}\n\nexport const useStore = create<EditorStoreState>(set => ({\n  building: {\n    name: '',\n    levels: [],\n    params: [],\n    uuid: '',\n  },\n  selection: null,\n  setSelection: (newSelection: EditorObject) => set(state => ({ selection: newSelection })),\n  clearSelection: () => set(state => ({ selection: null })),\n\n  editorMode: '3d',\n  setEditorMode: (newEditorMode: string) => set(state => ({ editorMode: newEditorMode })),\n}))\n","import React from 'react';\n//import { Param } from './Param';\n//import { BuildingContext } from './BuildingContext';\nimport { useStore, EditorWall, EditorLane, EditorFloor, EditorLevel, EditorVertex, EditorParam } from './EditorStore'\nimport TreeView from '@material-ui/lab/TreeView';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\n\nexport default function BuildingSummary(): JSX.Element {\n  const building = useStore(state => state.building);\n  const setSelection = useStore(state => state.setSelection);\n  \n  //if (!building.valid()) {\n  if (building.name === '') {\n    return (\n      <div style={{margin: '1em'}}>\n        <p>\n          No map loaded.\n        </p>\n        <p>\n          To load a map, click the menu icon in the upper-left.\n        </p>\n      </div>\n    );\n  }\n \n  const renderFloor = (floor: EditorFloor): JSX.Element => {\n    let label = 'floor (';\n    label += floor.vertex_indices.map((idx) => idx.toString()).join(', ') + ')';\n    return(\n      <TreeItem\n        nodeId={floor.uuid}\n        key={floor.uuid}\n        label={label}\n        onClick={(event) => {\n          setSelection(floor);\n        }}\n      >\n        {floor.params.map((param) => renderParam(param))}\n      </TreeItem>\n    );\n  }\n\n  const renderWall = (wall: EditorWall): JSX.Element => {\n    let label = `(${wall.start_idx} => ${wall.end_idx})`;\n    return(\n      <TreeItem\n        nodeId={wall.uuid}\n        key={wall.uuid}\n        onClick={(event) => {\n          setSelection(wall);\n        }}\n        label={label} />\n    );\n  }\n\n  const renderLane = (lane: EditorLane): JSX.Element => {\n    let label = `(${lane.start_idx} => ${lane.end_idx})`;\n    return(\n      <TreeItem\n        nodeId={lane.uuid}\n        key={lane.uuid}\n        label={label}\n        onClick={(event) => {\n          setSelection(lane);\n        }}\n      />\n    );\n  }\n\n  const renderParam = (param: EditorParam): JSX.Element => {\n    return (\n      <TreeItem\n        nodeId={param.uuid}\n        key={param.uuid}\n        label={`${param.name}=${param.value}`} />\n    );\n  }\n\n  const renderVertex = (vertex: EditorVertex): JSX.Element => {\n    let label = \"(\" + vertex.x + \", \" + vertex.y + \")\";\n    if (vertex.name)\n      label = vertex.name + ': ' + label;\n    return (\n      <TreeItem\n        nodeId={vertex.uuid}\n        key={vertex.uuid}\n        onClick={(event) => {\n          setSelection(vertex);\n        }}\n        label={label}>\n        {vertex.params.map((param) => renderParam(param))}\n      </TreeItem>\n    );\n  }\n\n  const renderLevel = (level: EditorLevel): JSX.Element => {\n    return (\n      <TreeItem nodeId={level.uuid} key={level.uuid} label={level.name}>\n        <TreeItem nodeId={level.uuid + '_vertices'} label=\"vertices\">\n          {level.vertices.map((vertex) => renderVertex(vertex))}\n        </TreeItem>\n        <TreeItem nodeId={level.uuid + '_lanes'} label=\"lanes\">\n          {level.lanes.map((lane) => renderLane(lane))}\n        </TreeItem>\n        <TreeItem nodeId={level.uuid + '_walls'} label=\"walls\">\n          {level.walls.map((wall) => renderWall(wall))}\n        </TreeItem>\n        <TreeItem nodeId={level.uuid + '_floors'} label=\"floors\">\n          {level.floors.map((floor) => renderFloor(floor))}\n        </TreeItem>\n      </TreeItem>\n    );\n  }\n\n  // defaultExpanded={[building.uuid + '_levels']}\n  return (\n    <TreeView\n      defaultCollapseIcon={<ExpandMoreIcon />}\n      defaultExpandIcon={<ChevronRightIcon />}\n    >\n      <TreeItem nodeId={building.uuid + '_name'} label={\"name: \" + building.name} />\n      <TreeItem nodeId={building.uuid + '_levels'} label=\"levels\">\n        {building.levels.map((level) => renderLevel(level))}\n      </TreeItem>\n    </TreeView>\n  );\n\n  /*\n  return (\n    <div>building summary goes here</div>\n  );\n  */\n}\n","import React from 'react'\nimport * as THREE from 'three'\nimport { useStore, EditorVertex } from './EditorStore';\n\ninterface SceneVertexProps {\n  vertex: EditorVertex,\n  elevation: number,\n}\n\nexport function SceneVertex(props: SceneVertexProps): JSX.Element {\n  const selection = useStore(state => state.selection)\n  const setSelection = useStore(state => state.setSelection)\n\n  const x = props.vertex.x / 50.0;\n  const y = props.vertex.y / 50.0;\n\n  let color = \"rgb(0, 128, 0)\";\n  if (selection && selection.uuid === props.vertex.uuid) {\n    color = \"rgb(255, 100, 10)\";\n  }\n\n  return (\n    <mesh\n      position={[x, y, 0.25 + props.elevation]}\n      scale={1.0}\n      rotation={new THREE.Euler(Math.PI / 2, 0, 0)}\n      key={props.vertex.uuid}\n      onClick={(event) => {\n        event.stopPropagation();\n        console.log('vertex onClick');\n        setSelection(props.vertex);\n      }}\n    >\n      <cylinderGeometry args={[0.3, 0.3, 0.2, 8]} />\n      <meshStandardMaterial color={color} />\n    </mesh>\n  );\n}\n","import React from 'react'\nimport * as THREE from 'three'\nimport { useStore, EditorVertex, EditorWall } from './EditorStore';\n\ninterface SceneWallProps {\n  vertex_start: EditorVertex,\n  vertex_end: EditorVertex,\n  wall: EditorWall,\n  elevation: number,\n}\n\nexport function SceneWall(props: SceneWallProps): JSX.Element {\n  const selection = useStore(state => state.selection)\n  const setSelection = useStore(state => state.setSelection)\n\n  const v1 = props.vertex_start;\n  const v2 = props.vertex_end;\n  const cx = (v1.x + v2.x) / 2 / 50;\n  const cy = (v1.y + v2.y) / 2 / 50;\n  const dx = v2.x - v1.x;\n  const dy = v2.y - v1.y;\n  const len = Math.sqrt(dx*dx + dy*dy) / 50;\n  const xyrot = Math.atan2(dy, dx);\n\n  const color: THREE.Color = React.useMemo(() => {\n    let color = new THREE.Color(0.1, 0.1, 0.7);\n    if (selection && selection.uuid === props.wall.uuid) {\n      color.setRGB(1, 0.4, 0.1);\n    }\n    return color;\n  }, [selection, props.wall.uuid]);\n\n  return (\n    <mesh\n      position={[cx, cy, 1.0 + props.elevation]}\n      rotation={new THREE.Euler(0, 0, xyrot)}\n      scale={1.0}\n      key={props.wall.uuid}\n      onClick={(event) => {\n        event.stopPropagation();\n        setSelection(props.wall);\n      }}\n    >\n      <boxGeometry args={[len, 0.1, 2]} />\n      <meshStandardMaterial color={color} />\n    </mesh>\n  );\n}\n","import React from 'react'\nimport * as THREE from 'three'\nimport { useStore, EditorVertex, EditorFloor } from './EditorStore';\n\ntype SceneFloorProps = {\n  floor: EditorFloor;\n  vertices: EditorVertex[];\n  elevation: number;\n}\n\nexport function SceneFloor(props: SceneFloorProps): JSX.Element {\n  const selection = useStore(state => state.selection)\n  const setSelection = useStore(state => state.setSelection)\n\n  const shape = React.useMemo(() => {\n    const shape = new THREE.Shape();\n    let started = false;\n\n    for (const v of props.vertices) {\n      if (!started)\n      {\n        shape.moveTo(v.x / 50, v.y / 50)\n        started = true\n      }\n      else\n        shape.lineTo(v.x / 50, v.y / 50)\n    }\n    const v0 = props.vertices[0]\n    shape.lineTo(v0.x / 50, v0.y / 50)\n    return shape\n  }, [props.vertices])\n\n  const color: THREE.Color = React.useMemo(() => {\n    let color = new THREE.Color(1, 1, 1)\n    if (selection && selection.uuid === props.floor.uuid) {\n      color.setRGB(1, 0.4, 0.1)\n    }\n    return color;\n  }, [selection, props.floor.uuid]);\n\n  return (\n    <mesh\n      key={props.floor.uuid}\n      onClick={(event) => {\n        event.stopPropagation()\n        console.log('floor onClick')\n        setSelection(props.floor)\n      }}\n    >\n      <extrudeGeometry args={[shape, { 'depth': 0.1, 'bevelEnabled': false } ]} />\n      <meshStandardMaterial color={color} />\n    </mesh>\n  );\n\n  /*\n  return (\n    <gridHelper\n      args={[100, 100]}\n      rotation={new THREE.Euler(Math.PI / 2, 0, 0)}\n      position={new THREE.Vector3(50, -50, elevation)}/>\n  );\n   */\n}\n","import React from 'react'\nimport * as THREE from 'three'\nimport { useStore, EditorVertex, EditorLane } from './EditorStore';\n\ninterface SceneLaneProps {\n  vertex_start: EditorVertex,\n  vertex_end: EditorVertex,\n  lane: EditorLane,\n  elevation: number,\n}\n\nexport function SceneLane(props: SceneLaneProps): JSX.Element {\n  const selection = useStore(state => state.selection)\n  const setSelection = useStore(state => state.setSelection)\n\n  const v1 = props.vertex_start;\n  const v2 = props.vertex_end;\n  const cx = (v1.x + v2.x) / 2 / 50;\n  const cy = (v1.y + v2.y) / 2 / 50;\n  const dx = v2.x - v1.x;\n  const dy = v2.y - v1.y;\n  const len = Math.sqrt(dx*dx + dy*dy) / 50;\n  const xyrot = Math.atan2(dy, dx);\n\n  const color: THREE.Color = React.useMemo(() => {\n    let color = new THREE.Color(0.4, 0.05, 0.05);\n    if (selection && selection.uuid === props.lane.uuid) {\n      color.setRGB(0.8, 0.3, 0.01);\n    }\n    return color;\n  }, [selection, props.lane.uuid]);\n\n  return (\n    <mesh\n      position={[cx, cy, 0.2 + props.elevation]}\n      rotation={new THREE.Euler(0, 0, xyrot)}\n      scale={1.0}\n      key={props.lane.uuid}\n      onClick={(event) => {\n        event.stopPropagation();\n        setSelection(props.lane);\n      }}\n    >\n      <boxGeometry args={[len, 1.0, 0.1]} />\n      <meshStandardMaterial color={color} />\n    </mesh>\n  );\n}\n","import React from 'react'\nimport { EditorLevel } from './EditorStore';\nimport { SceneVertex } from './SceneVertex';\nimport { SceneWall } from './SceneWall';\nimport { SceneFloor } from './SceneFloor';\nimport { SceneLane } from './SceneLane';\n\ntype SceneLevelProps = {\n  level: EditorLevel\n}\n\nexport function SceneLevel(props: SceneLevelProps): JSX.Element {\n  const z = props.level.elevation / 2;\n\n  const vertices =\n    props.level.vertices.map((vertex) =>\n      <SceneVertex\n        key={vertex.uuid}\n        vertex={vertex}\n        elevation={z} />\n    );\n\n  const walls =\n    props.level.walls.map((wall) =>\n      <SceneWall\n        key={wall.uuid}\n        wall={wall}\n        vertex_start={props.level.vertices[wall.start_idx]}\n        vertex_end={props.level.vertices[wall.end_idx]}\n        elevation={z} />\n    );\n\n  const floors =\n    props.level.floors.map((floor) =>\n      <SceneFloor\n        key={floor.uuid}\n        floor={floor}\n        vertices={floor.vertex_indices.map((idx) => props.level.vertices[idx])}\n        elevation={z} />\n    );\n\n  const lanes =\n    props.level.lanes.map((lane) =>\n      <SceneLane\n        key={lane.uuid}\n        lane={lane}\n        vertex_start={props.level.vertices[lane.start_idx]}\n        vertex_end={props.level.vertices[lane.end_idx]}\n        elevation={z} />\n    );\n\n  return (\n    <group>\n      {[\n        ...vertices,\n        ...walls,\n        ...floors,\n        ...lanes,\n      ]}\n    </group>\n  );\n}\n","import * as THREE from 'three'\nimport { Canvas } from '@react-three/fiber'\nimport React, { useRef } from 'react'\nimport { MapControls, OrbitControls } from '@react-three/drei'\nimport { PerspectiveCamera, OrthographicCamera } from '@react-three/drei'\n\nimport { useStore } from './EditorStore';\nimport { SceneLevel } from './SceneLevel';\n\ntype EditorSceneProps = {\n};\n\nexport function EditorScene(props: EditorSceneProps): JSX.Element {\n  const building = useStore(state => state.building);\n  const clearSelection = useStore(state => state.clearSelection);\n  const editorMode = useStore(state => state.editorMode);\n\n  function computeBoundingBox(): THREE.Box3 {\n    let vec_min = new THREE.Vector3(Infinity, Infinity, Infinity);\n    let vec_max = new THREE.Vector3(-Infinity, -Infinity, -Infinity);\n    for (const level of building.levels) {\n      for (const vertex of level.vertices) {\n        if (vertex.x < vec_min.x)\n          vec_min.x = vertex.x;\n        if (vertex.x > vec_max.x)\n          vec_max.x = vertex.x;\n\n        if (vertex.y < vec_min.y)\n          vec_min.y = vertex.y;\n        if (vertex.y > vec_max.y)\n          vec_max.y = vertex.y;\n      }\n    }\n    return new THREE.Box3(vec_min, vec_max);\n  }\n\n  const Controls = (): JSX.Element => {\n    const perspective_camera = useRef<THREE.Camera>(null);\n    const orthographic_camera = useRef<THREE.Camera>(null);\n    THREE.Object3D.DefaultUp = new THREE.Vector3(0, 0, 1);\n\n    // todo: don't create this new every time\n    const bb: THREE.Box3 = computeBoundingBox();\n    const target = new THREE.Vector3(\n      (bb.min.x + bb.max.x) / 2.0 / 50,\n      (bb.min.y + bb.max.y) / 2.0 / 50,\n      0.0);\n\n    // todo: there is probably a better way to do this than having two cameras\n    return (\n      <>\n        <PerspectiveCamera ref={perspective_camera} position={[20, -20, 5]} fov={100} makeDefault={editorMode === '3d'} />\n        <OrthographicCamera ref={orthographic_camera} position={[0, 0, 5]} zoom={20} makeDefault={editorMode === '2d'} />\n        {\n          editorMode === '3d' ?\n            perspective_camera && <MapControls\n              enableDamping={false}\n              camera={perspective_camera.current!}\n              target={[20, -10, 0]}\n              mouseButtons={{\n                LEFT: -1,\n                MIDDLE: THREE.MOUSE.PAN,\n                RIGHT: THREE.MOUSE.ROTATE,\n              }}\n              touches={{\n                ONE: THREE.TOUCH.PAN,\n                TWO: THREE.TOUCH.ROTATE\n              }}\n            />\n            : orthographic_camera && <OrbitControls\n              enableDamping={false}\n              target={target}\n              camera={orthographic_camera.current!}\n              maxPolarAngle={0}\n              minAzimuthAngle={0}\n              maxAzimuthAngle={0}\n              mouseButtons={{\n                LEFT: -1,\n                MIDDLE: THREE.MOUSE.PAN,\n                RIGHT: -1,\n              }}\n              touches={{\n                ONE: THREE.TOUCH.PAN,\n                TWO: THREE.TOUCH.ROTATE\n              }}\n            />\n        }\n      </>\n    );\n  }\n\n  return (\n    <Canvas\n      frameloop=\"demand\"\n      onPointerMissed={() => {\n        console.log(\"onPointerMissed\");\n        clearSelection();\n      }}\n    >\n      <Controls />\n      <axesHelper />\n      <ambientLight />\n      <pointLight position={[10, 10, 10]} />\n      {building.levels.map((level) => <SceneLevel key={level.uuid} level={level} />)}\n    </Canvas>\n  )\n}\n","import React from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { useStore } from './EditorStore';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  noSelectionDiv: {\n  },\n  table: {\n    padding: '0px',\n    margin: '0px'\n  },\n  tableHead: {\n  },\n  tableHeadRow: {\n    borderBottomStyle: 'solid',\n    borderBottom: '1px',\n    borderBottomColor: theme.palette.primary.main,\n  },\n  tableHeadCell: {\n    fontWeight: 'bold',\n    padding: '0px',\n    paddingLeft: '5px',\n  },\n  tableCell: {\n    padding: '0px',\n    paddingLeft: '5px',\n  }\n}));\n\nexport default function PropertyEditor(): JSX.Element {\n  const classes = useStyles();\n  const selection = useStore(state => state.selection);\n\n  if (!selection) {\n    return (<div className={classes.noSelectionDiv}></div>);\n  }\n\n  let rows = selection.params.map((param) => (\n    <TableRow>\n      <TableCell className={classes.tableCell}>{param.name}</TableCell>\n      <TableCell className={classes.tableCell}>{param.value.toString()}</TableCell>\n    </TableRow>\n  ));\n\n  // todo: add any other class-specific stuff\n\n  return (\n    <Table className={classes.table}>\n      <TableHead className={classes.tableHead}>\n        <TableRow className={classes.tableHeadRow}>\n          <TableCell className={classes.tableHeadCell}>Property Name</TableCell>\n          <TableCell className={classes.tableHeadCell}>Property Value</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {rows}\n      </TableBody>\n    </Table>\n  );\n}\n","import {\n  useStore,\n  EditorBuilding,\n  EditorLevel,\n  EditorParam,\n  EditorWall,\n  EditorFloor,\n  EditorLane,\n  EditorVertex } from './EditorStore'\nimport YAML from 'yaml'\nimport { v4 as generate_uuid } from 'uuid'\n\nfunction ParamArrayFactory(params_data: any): EditorParam[] {\n  if (!params_data)\n    return []\n  let params = Array<EditorParam>();\n  for (const param_name in params_data) {\n    const param_data = params_data[param_name];\n    let p: EditorParam = {\n      name: param_name,\n      type_idx: param_data[0],\n      value: param_data[1],\n      uuid: generate_uuid(),\n    }\n    params.push(p)\n  }\n  return params\n}\n\nfunction VertexFactory(vertex_data: any): EditorVertex {\n  return {\n    x: vertex_data[0],\n    y: -vertex_data[1],\n    name: vertex_data[3],\n    uuid: generate_uuid(),\n    params: ParamArrayFactory(vertex_data[4]),\n  }\n}\n\nfunction WallFactory(wall_data: any): EditorWall {\n  return {\n    start_idx: wall_data[0],\n    end_idx: wall_data[1],\n    params: ParamArrayFactory(wall_data[2]),\n    uuid: generate_uuid(),\n  }\n}\n\nfunction FloorFactory(floor_data: any): EditorFloor {\n  return {\n    uuid: generate_uuid(),\n    params: ParamArrayFactory(floor_data['parameters']),\n    vertex_indices: floor_data['vertices'].map((vertex_idx: number) => vertex_idx),\n  }\n}\n\nfunction LaneFactory(lane_data: any): EditorLane {\n  return {\n    uuid: generate_uuid(),\n    start_idx: lane_data[0],\n    end_idx: lane_data[1],\n    params: ParamArrayFactory(lane_data[2]),\n  }\n}\n\nfunction LevelFactory(level_name: string, level_data: any): EditorLevel {\n  return {\n    uuid: generate_uuid(),\n    name: level_name,\n    elevation: level_data['elevation'],\n    params: Array<EditorParam>(),\n    vertices: level_data['vertices'].map((vertex: any) => VertexFactory(vertex)),\n    walls: level_data['walls'].map((wall: any) => WallFactory(wall)),\n    floors: level_data['floors'].map((floor: any) => FloorFactory(floor)),\n    lanes: level_data['lanes'].map((lane: any) => LaneFactory(lane)),\n  }\n}\n\nfunction BuildingFactory(yaml_text: string): EditorBuilding {\n  const yaml = YAML.parse(yaml_text)\n  const name = yaml['name']  // todo: make up a name if it's not here\n  let building = {\n    name: name,\n    levels: Array<EditorLevel>(), //[],\n    params: [],\n    uuid: generate_uuid()\n  }\n  for (const level_name in yaml['levels']) {\n    const level_data = yaml['levels'][level_name]\n    building.levels.push(LevelFactory(level_name, level_data));\n  }\n\n  return building\n}\n\nexport function YAMLParser(yaml_text: string): void {\n  useStore.setState({\n    building: BuildingFactory(yaml_text),\n    selection: null\n  })\n}\n\nexport async function YAMLRetriever(uri: string): Promise<void> {\n  await fetch(uri)\n    .then(response => response.text())\n    .then(text => YAMLParser(text));\n}\n\nexport async function YAMLRetrieveDemo(name: string): Promise<void> {\n  await YAMLRetriever(\n    process.env.PUBLIC_URL + `/demos/${name}/${name}.building.yaml`);\n}\n","import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport List from '@material-ui/core/List';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MapIcon from '@material-ui/icons/Map';\n\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { YAMLParser } from './YAMLParser';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  directoryButton: {\n    fontSize: theme.typography.h5.fontSize\n  },\n  filename: {\n    fontSize: theme.typography.h5.fontSize,\n    textDecoration: 'underline'\n  },\n  dialog: {\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\ntype OpenDialogProps = {\n  open: boolean;\n  onOpen: () => void; //filename: string, handle: FileSystemDirectoryHandle | undefined) => void;\n  onCancel: () => void;\n};\n\nexport default function OpenDialog(props: OpenDialogProps): JSX.Element {\n  const classes = useStyles(props);\n  const [buildingFileNames, setBuildingFileNames] = React.useState<string[]>([]);\n  const [directoryHandle, setDirectoryHandle] = React.useState<FileSystemDirectoryHandle>();\n\n  const onDirectoryClick = async () => {\n    setBuildingFileNames([]);\n    const handle = await window.showDirectoryPicker();\n    await setDirectoryHandle(handle);\n    for await (const entry of handle.values()) {\n      if (entry.name.endsWith('.building.yaml'))\n        setBuildingFileNames(previous => [...previous, entry.name]);\n    }\n  }\n\n  const loadFile = async(filename: string) => {\n    if (directoryHandle) {\n      const fileHandle = await directoryHandle.getFileHandle(filename);\n      const file = await fileHandle.getFile();\n      const text = await file.text();\n      YAMLParser(text);\n    }\n    props.onOpen();\n  }\n\n  const buildingFileList = () => {\n    if (buildingFileNames.length > 0)\n      return (\n        <div>\n          <List\n            subheader={\n              <ListSubheader component=\"div\">\n                Available Files\n              </ListSubheader>\n            }\n          >\n            {buildingFileNames.map((filename) =>\n              <ListItem button key={filename}>\n                <ListItemIcon>\n                  <MapIcon />\n                </ListItemIcon>\n                <ListItemText primary={filename} onClick={e => {loadFile(filename)}} />\n              </ListItem>)\n            }\n          </List>\n        </div>\n      );\n  }\n\n  return (\n    <Dialog open={props.open} onClose={props.onCancel}>\n      <DialogTitle>Open Building Map</DialogTitle>\n      <DialogContent className={classes.dialog}>\n        <Button variant=\"contained\" color=\"primary\" onClick={onDirectoryClick}>\n          Select Directory...\n        </Button>\n        {buildingFileList()}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={props.onCancel} color=\"primary\">\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport ToolBar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, withStyles, Theme } from '@material-ui/core/styles';\nimport { useStore } from './EditorStore';\nimport OpenDialog from './OpenDialog';\nimport { YAMLRetriever, YAMLRetrieveDemo } from './YAMLParser';\n\nconst StyledToggleButtonGroup = withStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: theme.palette.primary.light,\n    padding: theme.spacing(0.5)\n  },\n  grouped: {\n    //marginRight: theme.spacing(0.5),\n    //marginLeft: theme.spacing(0.5),\n    //margin: theme.spacing(0.5),\n    color: theme.palette.primary.contrastText,\n    //background: theme.palette.primary.dark,\n    \"&.Mui-selected:hover, &:hover\": {\n      background: theme.palette.primary.dark,\n    },\n    \"&.Mui-selected\": {\n      background: theme.palette.primary.dark,\n      color: theme.palette.primary.contrastText\n    },\n    /*\n    '&:not(:first-child)': {\n      borderRadius: '5px',\n    },\n    '&:first-child': {\n      borderRadius: '5px',\n    },\n    */\n  }\n}))(ToggleButtonGroup);\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    flexGrow: 1,\n    minHeight: '100vh',\n  },\n  flex: {\n    flex: 1\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20\n  },\n  toolbarMargin: theme.mixins.toolbar,\n  workingArea: {\n    backgroundColor: \"black\",\n    height: `calc(100vh - 64px)`,\n  },\n  mainGrid: {\n  },\n  gridLeftColumn: {\n    borderRight: '5px',\n    borderRightStyle: 'solid',\n    borderRightColor: theme.palette.primary.main,\n  },\n  propertyGridItem: {\n    borderTop: '5px',\n    borderTopStyle: 'solid',\n    borderTopColor: theme.palette.primary.main,\n  }\n}));\n\n\n\nexport default function MainMenu(props: React.PropsWithChildren<{}>): JSX.Element {\n  const classes = useStyles(props);\n  const [menuAnchorEl, setMenuAnchorEl] = React.useState(null);\n  const [isOpenDialogOpen, setIsOpenDialogOpen] = React.useState(false);\n  const editorMode = useStore(state => state.editorMode);\n  const setEditorMode = useStore(state => state.setEditorMode);\n\n  const onModeChange = (event: React.MouseEvent<HTMLElement>, newMode: string | null) => {\n    if (newMode !== null)\n      setEditorMode(newMode);\n  };\n\n  return (\n    <AppBar position=\"fixed\">\n      <ToolBar>\n        <IconButton\n          className={classes.menuButton}\n          color=\"inherit\"\n          aria-label=\"Menu\"\n          onClick={(e: any) => { setMenuAnchorEl(e.currentTarget); }}\n        >\n          <MenuIcon />\n        </IconButton>\n        <Menu\n          keepMounted\n          anchorEl={menuAnchorEl}\n          open={Boolean(menuAnchorEl)}\n          onClose={() => setMenuAnchorEl(null)}\n          getContentAnchorEl={null}\n          anchorOrigin={{vertical: 'bottom', horizontal: 'center'}}\n          transformOrigin={{vertical: 'top', horizontal: 'center'}}\n          transitionDuration={0.0}\n        >\n          <MenuItem\n            onClick={async () => {\n              await YAMLRetriever('http://localhost:8000/map_file');\n              setMenuAnchorEl(null);\n            }}\n          >\n            Open map from localhost:8000\n          </MenuItem>\n          <MenuItem\n            onClick={async () => {\n              await YAMLRetrieveDemo('office');\n              setMenuAnchorEl(null);\n            }}\n          >\n            Open demo map\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              setIsOpenDialogOpen(true);\n              setMenuAnchorEl(null);\n            }}\n          >\n            Open map from local file...\n          </MenuItem>\n        </Menu>\n        <Typography variant=\"h6\" color=\"inherit\" className={classes.flex}>\n          Traffic Editor\n        </Typography>\n        <StyledToggleButtonGroup\n          value={editorMode}\n          size=\"small\"\n          exclusive\n          onChange={onModeChange}\n          aria-label=\"editor mode\"\n        >\n          <ToggleButton value=\"3d\">3D</ToggleButton>\n          <ToggleButton value=\"2d\">2D</ToggleButton>\n        </StyledToggleButtonGroup>\n      </ToolBar>\n      <OpenDialog\n        open={isOpenDialogOpen}\n        onOpen={() => setIsOpenDialogOpen(false)}\n        onCancel={() => setIsOpenDialogOpen(false)}\n      />\n    </AppBar>\n  );\n}\n","import React from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\nimport BuildingSummary from './BuildingSummary';\nimport { EditorScene } from './EditorScene';\nimport PropertyEditor from './PropertyEditor';\nimport MainMenu from './MainMenu';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    flexGrow: 1,\n    minHeight: '100vh',\n  },\n  flex: {\n    flex: 1\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20\n  },\n  toolbarMargin: theme.mixins.toolbar,\n  workingArea: {\n    backgroundColor: \"black\",\n    height: `calc(100vh - 64px)`,\n  },\n  gridLeftColumn: {\n    borderRight: '5px',\n    borderRightStyle: 'solid',\n    borderRightColor: theme.palette.primary.main,\n  },\n  propertyGridItem: {\n    borderTop: '5px',\n    borderTopStyle: 'solid',\n    borderTopColor: theme.palette.primary.main,\n  }\n}));\n\nexport default function App(props: React.PropsWithChildren<{}>): JSX.Element {\n  const classes = useStyles(props);\n\n  return (\n    <div className={classes.root}>\n      <MainMenu />\n      <div className={classes.toolbarMargin} />\n      <Grid container spacing={0}>\n        <Grid className={classes.gridLeftColumn} container xs={3} direction=\"column\" spacing={0}>\n          <Grid item style={{height: '40vh', overflow: 'auto'}}>\n            <BuildingSummary />\n          </Grid>\n          <Grid item className={classes.propertyGridItem} style={{height: '40vh', overflow: 'auto'}}>\n            <PropertyEditor />\n          </Grid>\n        </Grid>\n        <Grid item xs={9} className={classes.workingArea}>\n          <EditorScene />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}