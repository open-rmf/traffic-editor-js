{"version":3,"sources":["EditorObject.ts","Param.ts","Building.ts","BuildingContext.tsx","OpenDialog.tsx","BuildingSummary.tsx","SceneFloor.tsx","EditorScene.tsx","App.tsx","index.tsx"],"names":["EditorObject","uuid","params","this","uuidv4","Param","type_idx","name","value","param_name","param_data","p","generate_uuid","ParamArrayFromYAML","params_data","param","fromYAML","push","Lane","start_idx","end_idx","lane_data","lane","Wall","wall_data","wall","Floor","vertex_indices","floor_data","floor","vertex_idx","Vertex","x","y","vertex_data","vertex","Level","elevation","vertices","walls","lanes","floors","level_name","level_data","level","Building","filename","yaml","levels","lifts","crowd_sim","undefined","yaml_text","building","YAML","parse","uri","fetch","then","response","text","process","BuildingContext","React","createContext","updateBuilding","useStyles","makeStyles","theme","directoryButton","fontSize","typography","h5","textDecoration","dialog","backgroundColor","palette","background","paper","OpenDialog","props","classes","useContext","useState","buildingFileNames","setBuildingFileNames","directoryHandle","setDirectoryHandle","onDirectoryClick","a","window","showDirectoryPicker","handle","entry","endsWith","previous","values","loadFile","getFileHandle","fileHandle","getFile","file","onOpen","Dialog","open","onClose","onCancel","DialogTitle","DialogContent","className","Button","variant","color","onClick","length","List","subheader","ListSubheader","component","map","ListItem","button","ListItemIcon","ListItemText","primary","e","buildingFileList","DialogActions","BuildingSummary","renderParam","TreeItem","nodeId","label","renderLevel","renderVertex","renderWall","idx","toString","join","renderFloor","TreeView","defaultCollapseIcon","defaultExpandIcon","defaultExpanded","SceneFloor","shape","useMemo","THREE","started","v","lineTo","moveTo","v0","args","EditorScene","z","position","scale","rotation","Math","PI","v1","v2","cx","cy","dx","dy","len","sqrt","xyrot","atan2","renderLane","Controls","camera","useThree","mode","up","DefaultUp","updateProjectionMatrix","MapControls","enableDamping","target","zoom","OrbitControls","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","EditorCanvas","canvasProps","console","log","frameloop","children","orthographic","root","flexGrow","minHeight","flex","menuButton","marginLeft","marginRight","toolbarMargin","mixins","toolbar","workingArea","height","StyledToggleButtonGroup","withStyles","light","padding","spacing","grouped","contrastText","dark","ToggleButtonGroup","App","menuAnchorEl","setMenuAnchorEl","isOpenDialogOpen","setIsOpenDialogOpen","editorMode","setEditorMode","Provider","AppBar","IconButton","aria-label","currentTarget","keepMounted","anchorEl","Boolean","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","transitionDuration","MenuItem","fromURL","fromDemo","Typography","size","exclusive","onChange","event","newMode","ToggleButton","Grid","container","item","xs","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b811a6f0.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid'\nimport { Param } from './Param';\n\nexport class EditorObject {\n  uuid: string = '';\n  params: Param[] = [];\n\n  generate_uuid() {\n    this.uuid = uuidv4();\n  }\n}\n","import { EditorObject } from './EditorObject';\n\nexport class Param extends EditorObject {\n  type_idx: number = 0;\n  name: string = '';\n  value: any = null;\n\n  static fromYAML(param_name: string, param_data: any): Param {\n    let p = new Param();\n    p.name = param_name;\n    p.type_idx = param_data[0];\n    p.value = param_data[1];\n    p.generate_uuid();\n    return p;\n  }\n}\n\n// useful helper in a few of our YAML parsing spots\nexport const ParamArrayFromYAML = (params_data: any | null) => {\n  if (!params_data)\n    return [];\n  let params = [];\n  for (const param_name in params_data) {\n    const param = Param.fromYAML(param_name, params_data[param_name]);\n    params.push(param);\n  }\n  return params;\n}\n\n\n","import YAML from 'yaml'\nimport { EditorObject } from './EditorObject';\nimport { ParamArrayFromYAML } from './Param';\n\nexport class Lane extends EditorObject {\n  start_idx: number = -1;\n  end_idx: number = -1;\n\n  static fromYAML(lane_data: any): Lane {\n    let lane = new Lane();\n    lane.start_idx = lane_data[0];\n    lane.end_idx = lane_data[1];\n    lane.generate_uuid();\n    lane.params = ParamArrayFromYAML(lane_data[2]);\n    return lane;\n  }\n}\n\nexport class Wall extends EditorObject {\n  start_idx: number = -1;\n  end_idx: number = -1;\n\n  static fromYAML(wall_data: any): Wall {\n    let wall = new Wall();\n    wall.start_idx = wall_data[0];\n    wall.end_idx = wall_data[1];\n    wall.params = ParamArrayFromYAML(wall_data[2]);\n    wall.generate_uuid();\n    return wall;\n  }\n}\n\nexport class Floor extends EditorObject {\n  vertex_indices: number[] = [];\n\n  static fromYAML(floor_data: any): Floor {\n    let floor = new Floor();\n    floor.generate_uuid();\n    floor.params = ParamArrayFromYAML(floor_data['parameters']);\n    for (const vertex_idx of floor_data['vertices']) {\n      floor.vertex_indices.push(vertex_idx);\n    }\n    return floor;\n  }\n}\n\nexport class Vertex extends EditorObject {\n  x: number = 0;\n  y: number = 0;\n  name: string = '';\n\n  static fromYAML(vertex_data: any): Vertex {\n    let vertex = new Vertex();\n    vertex.x = vertex_data[0];\n    vertex.y = -vertex_data[1];\n    vertex.name = vertex_data[3];\n    vertex.params = ParamArrayFromYAML(vertex_data[4]);\n    vertex.generate_uuid();\n    return vertex;\n  }\n}\n\nexport class Level extends EditorObject {\n  name: string = '';\n  elevation: number = 0;\n  vertices: Vertex[] = [];\n  walls: Wall[] = [];\n  lanes: Lane[] = [];\n  floors: Floor[] = [];\n\n  static fromYAML(level_name: string, level_data: any): Level {\n    let level = new Level();\n    level.name = level_name;\n    level.elevation = level_data['elevation'];\n    level.generate_uuid();\n    for (const vertex_data of level_data['vertices']) {\n      level.vertices.push(Vertex.fromYAML(vertex_data));\n    }\n    for (const wall_data of level_data['walls']) {\n      level.walls.push(Wall.fromYAML(wall_data));\n    }\n    for (const lane_data of level_data['lanes']) {\n      level.lanes.push(Lane.fromYAML(lane_data));\n    }\n    for (const floor_data of level_data['floors']) {\n      level.floors.push(Floor.fromYAML(floor_data));\n    }\n\n    return level;\n  }\n}\n\nexport class Lift extends EditorObject {\n  name: string = '';\n  // todo\n}\n\nexport class Building extends EditorObject {\n  name: string = '';\n  filename: string = '';\n  yaml: string = '';\n  levels: Level[] = [];\n  lifts: Lift[] = [];\n  crowd_sim: any = undefined;\n\n  static fromYAML(yaml_text: string): Building {\n    let building = new Building();\n    building.yaml = yaml_text;\n    const y = YAML.parse(yaml_text);\n    building.name = y['name'];\n    building.crowd_sim = y['crowd_sim'];\n    building.levels = [];\n    for (const level_name in y['levels']) {\n      const level_data = y['levels'][level_name];\n      building.levels.push(Level.fromYAML(level_name, level_data));\n    }\n    building.generate_uuid();\n    return building;\n  }\n\n  static async fromURL(uri: string): Promise<Building> {\n    return fetch(uri)\n      .then(response => response.text())\n      .then(text => Building.fromYAML(text));\n  }\n\n  static async fromDemo(name: string): Promise<Building> {\n    return fetch(process.env.PUBLIC_URL + `/demos/${name}/${name}.building.yaml`)\n      .then(response => response.text())\n      .then(text => Building.fromYAML(text));\n  }\n}\n","import React from 'react';\nimport { Building } from './Building';\n\ninterface BuildingContextProps {\n  building: Building;\n  updateBuilding: (nextBuilding: Building) => void;\n}\n\nexport const BuildingContext = React.createContext<BuildingContextProps>({\n  building: new Building(),\n  updateBuilding: () => {}\n});\n","import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport List from '@material-ui/core/List';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MapIcon from '@material-ui/icons/Map';\n\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { Building } from './Building';\nimport { BuildingContext } from './BuildingContext';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  directoryButton: {\n    fontSize: theme.typography.h5.fontSize\n  },\n  filename: {\n    fontSize: theme.typography.h5.fontSize,\n    textDecoration: 'underline'\n  },\n  dialog: {\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\ntype OpenDialogProps = {\n  open: boolean;\n  onOpen: () => void; //filename: string, handle: FileSystemDirectoryHandle | undefined) => void;\n  onCancel: () => void;\n};\n\nexport default function OpenDialog(props: OpenDialogProps): JSX.Element {\n  const classes = useStyles(props);\n  const { updateBuilding } = React.useContext(BuildingContext);\n  const [buildingFileNames, setBuildingFileNames] = React.useState<string[]>([]);\n  const [directoryHandle, setDirectoryHandle] = React.useState<FileSystemDirectoryHandle>();\n\n  const onDirectoryClick = async () => {\n    setBuildingFileNames([]);\n    const handle = await window.showDirectoryPicker();\n    await setDirectoryHandle(handle);\n    for await (const entry of handle.values()) {\n      if (entry.name.endsWith('.building.yaml'))\n        setBuildingFileNames(previous => [...previous, entry.name]);\n    }\n  }\n\n  const loadFile = async(filename: string) => {\n    if (directoryHandle) {\n      const fileHandle = await directoryHandle.getFileHandle(filename);\n      const file = await fileHandle.getFile();\n      const text = await file.text();\n      updateBuilding(Building.fromYAML(text));\n    }\n    props.onOpen();\n  }\n\n  const buildingFileList = () => {\n    if (buildingFileNames.length > 0)\n      return (\n        <div>\n          <List\n            subheader={\n              <ListSubheader component=\"div\">\n                Available Files\n              </ListSubheader>\n            }\n          >\n            {buildingFileNames.map((filename) =>\n              <ListItem button key={filename}>\n                <ListItemIcon>\n                  <MapIcon />\n                </ListItemIcon>\n                <ListItemText primary={filename} onClick={e => {loadFile(filename)}} />\n              </ListItem>)\n            }\n          </List>\n        </div>\n      );\n  }\n\n  return (\n    <Dialog open={props.open} onClose={props.onCancel}>\n      <DialogTitle>Open Building Map</DialogTitle>\n      <DialogContent className={classes.dialog}>\n        <Button variant=\"contained\" color=\"primary\" onClick={onDirectoryClick}>\n          Select Directory...\n        </Button>\n        {buildingFileList()}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={props.onCancel} color=\"primary\">\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React from 'react';\nimport { Level, Vertex, Wall, Floor } from './Building';\nimport { Param } from './Param';\nimport { BuildingContext } from './BuildingContext';\nimport TreeView from '@material-ui/lab/TreeView';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\n\nexport default function BuildingSummary(): JSX.Element {\n  const { building } = React.useContext(BuildingContext);\n  if (!building.name)\n    return (\n      <p>No building loaded.</p>\n    );\n \n  const renderParam = (param: Param): JSX.Element => {\n    return (\n      <TreeItem\n        nodeId={param.uuid}\n        label={`${param.name}=${param.value}`} />\n    );\n  }\n\n  const renderVertex = (vertex: Vertex): JSX.Element => {\n    let label = \"(\" + vertex.x + \", \" + vertex.y + \")\";\n    if (vertex.name)\n      label = vertex.name + ': ' + label;\n    return (\n      <TreeItem\n        nodeId={vertex.uuid}\n        label={label}>\n        {vertex.params.map((param) => renderParam(param))}\n      </TreeItem>\n    );\n  }\n\n  const renderFloor = (floor: Floor): JSX.Element => {\n    let label = 'floor (';\n    label += floor.vertex_indices.map((idx) => idx.toString()).join(', ') + ')';\n    return(\n      <TreeItem\n        nodeId={floor.uuid}\n        label={label}\n      >\n        {floor.params.map((param) => renderParam(param))}\n      </TreeItem>\n    );\n  }\n\n  const renderWall = (wall: Wall): JSX.Element => {\n    let label = `(${wall.start_idx} => ${wall.end_idx})`;\n    return(\n      <TreeItem\n        nodeId={wall.uuid}\n        label={label} />\n    );\n  }\n\n  const renderLevel = (level: Level): JSX.Element => {\n    return (\n      <TreeItem nodeId={level.uuid} label={level.name}>\n        <TreeItem nodeId={level.uuid + '_vertices'} label=\"vertices\">\n          {level.vertices.map((vertex) => renderVertex(vertex))}\n        </TreeItem>\n        <TreeItem nodeId={level.uuid + '_walls'} label=\"walls\">\n          {level.walls.map((wall) => renderWall(wall))}\n        </TreeItem>\n        <TreeItem nodeId={level.uuid + '_floors'} label=\"floors\">\n          {level.floors.map((floor) => renderFloor(floor))}\n        </TreeItem>\n      </TreeItem>\n    );\n  }\n\n  return (\n    <TreeView\n      defaultCollapseIcon={<ExpandMoreIcon />}\n      defaultExpandIcon={<ChevronRightIcon />}\n      defaultExpanded={[\"2\"]}\n    >\n      <TreeItem nodeId={building.uuid + '_name'} label={\"name: \" + building.name} />\n      <TreeItem nodeId={building.uuid + '_levels'} label=\"levels\">\n        {building.levels.map((level) => renderLevel(level))}\n      </TreeItem>\n    </TreeView>\n  );\n}\n","import React from 'react'\nimport * as THREE from 'three'\nimport { Vertex, Floor } from './Building';\n\ntype SceneFloorProps = {\n  floor: Floor;\n  vertices: Vertex[];\n  elevation: number;\n}\n\nexport function SceneFloor(props: SceneFloorProps): JSX.Element {\n  const shape = React.useMemo(() => {\n    const shape = new THREE.Shape();\n    let started = false;\n    for (const vertex_idx of props.floor.vertex_indices) {\n      const v = props.vertices[vertex_idx];\n      if (!started)\n      {\n        shape.moveTo(v.x / 50, v.y / 50);\n        started = true;\n      }\n      else\n        shape.lineTo(v.x / 50, v.y / 50);\n    }\n    const v0 = props.vertices[props.floor.vertex_indices[0]];\n    shape.lineTo(v0.x / 50, v0.y / 50);\n    return shape;\n  }, [props.floor, props.vertices]);\n\n  return (\n    <mesh>\n      <extrudeGeometry args={[shape, { 'depth': 0.1, 'bevelEnabled': false } ]} />\n      <meshStandardMaterial color={'#ffffff'} />\n    </mesh>\n  );\n\n  /*\n  return (\n    <gridHelper\n      args={[100, 100]}\n      rotation={new THREE.Euler(Math.PI / 2, 0, 0)}\n      position={new THREE.Vector3(50, -50, elevation)}/>\n  );\n   */\n}\n\n\n\n","import * as THREE from 'three'\nimport { Canvas, useThree } from '@react-three/fiber'\n//import React, { useRef, useState } from 'react'\nimport React from 'react'\nimport { MapControls, OrbitControls } from '@react-three/drei'\nimport { Lane, Level, Vertex, Wall } from './Building';\nimport { BuildingContext } from './BuildingContext';\nimport { SceneFloor } from './SceneFloor';\n\n/*\nfunction Box(props: JSX.IntrinsicElements['mesh']) {\n  const mesh = useRef<THREE.Mesh>(null!)\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={active ? 1.0 : 0.5}\n      onClick={(event) => setActive(!active)}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}\n    >\n      <boxGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\n*/\n\ntype EditorSceneProps = {\n  mode: string;\n};\n\nexport default function EditorScene(props: EditorSceneProps): JSX.Element {\n  const { building } = React.useContext(BuildingContext);\n\n  const renderVertex = (vertex: Vertex, elevation: number): JSX.Element => {\n    const x = vertex.x / 50.0;\n    const y = vertex.y / 50.0;\n    // todo: consider troika-three-text for rendering the labels?\n    return (\n      <mesh\n        position={[x, y, 0.25 + elevation]}\n        scale={1.0}\n        rotation={new THREE.Euler(Math.PI / 2, 0, 0)}\n      >\n        <cylinderGeometry args={[0.3, 0.3, 0.2, 8]} />\n        <meshStandardMaterial color={'green'} />\n      </mesh>\n    );\n  }\n\n  const renderWall = (wall: Wall, vertices: Vertex[], elevation: number): JSX.Element => {\n    const v1 = vertices[wall.start_idx];\n    const v2 = vertices[wall.end_idx];\n    const cx = (v1.x + v2.x) / 2 / 50;\n    const cy = (v1.y + v2.y) / 2 / 50;\n    const dx = v2.x - v1.x;\n    const dy = v2.y - v1.y;\n    const len = Math.sqrt(dx*dx + dy*dy) / 50;\n    const xyrot = Math.atan2(dy, dx);\n\n    return (\n      <mesh\n        position={[cx, cy, 1.0 + elevation]}\n        rotation={new THREE.Euler(0, 0, xyrot)}\n        scale={1.0}\n      >\n        <boxGeometry args={[len, 0.1, 2]} />\n        <meshStandardMaterial color={'#8080d0'} />\n      </mesh>\n    );\n  }\n\n  const renderLane = (lane: Lane, vertices: Vertex[], elevation: number): JSX.Element => {\n    const v1 = vertices[lane.start_idx];\n    const v2 = vertices[lane.end_idx];\n    const cx = (v1.x + v2.x) / 2 / 50;\n    const cy = (v1.y + v2.y) / 2 / 50;\n    const dx = v2.x - v1.x;\n    const dy = v2.y - v1.y;\n    const len = Math.sqrt(dx*dx + dy*dy) / 50;\n    const xyrot = Math.atan2(dy, dx);\n\n    return (\n      <mesh\n        position={[cx, cy, 0.2 + elevation]}\n        rotation={new THREE.Euler(0, 0, xyrot)}\n        scale={1.0}\n      >\n        <boxGeometry args={[len, 1.0, 0.1]} />\n        <meshStandardMaterial color={'#c04040'} />\n      </mesh>\n    );\n  }\n  const renderLevel = (level: Level): JSX.Element[] => {\n    const z = level.elevation / 2;\n    const vertices = level.vertices.map((vertex) => renderVertex(vertex, z));\n    const walls = level.walls.map((wall) => renderWall(wall, level.vertices, z));\n    const lanes = level.lanes.map((lane) => renderLane(lane, level.vertices, z));\n    const floors: JSX.Element[] = level.floors.map((floor) => (\n      <SceneFloor floor={floor} vertices={level.vertices} elevation={z} />\n    ));\n    return [\n      ...vertices,\n      ...walls,\n      ...lanes,\n      ...floors\n    ];\n  }\n\n  const Controls = (): JSX.Element => {\n    const camera = useThree(({ camera }) => camera);\n    if (props.mode === '3d') {\n      camera.up = new THREE.Vector3(0, 0, 1);\n      camera.position.x = 20;\n      camera.position.y = -20;\n      camera.position.z = 5;\n      THREE.Object3D.DefaultUp = new THREE.Vector3(0, 0, 1);\n      camera.updateProjectionMatrix();\n\n      return (\n        <MapControls\n          enableDamping={false}\n          camera={camera}\n          target={[20, -10, 0]}\n        />\n      );\n    }\n    else {\n      camera.zoom = 10;\n      camera.position.z = 5;\n      camera.updateProjectionMatrix();\n\n      return (\n        <OrbitControls\n          enableDamping={false}\n          target={[10, -10, 0]}\n          camera={camera}\n          maxPolarAngle={0}\n          minAzimuthAngle={0}\n          maxAzimuthAngle={0}\n        />\n      );\n    }\n  }\n\n  const EditorCanvas = (canvasProps: any) => {\n    console.log('EditorCanvas');\n    if (props.mode === '3d') {\n      return (\n        <Canvas\n          frameloop = \"demand\"\n        >\n          {canvasProps ? canvasProps.children : <></>}\n        </Canvas>\n      );\n    }\n    else {\n      return (\n        <Canvas\n          frameloop = \"demand\"\n          orthographic\n        >\n          {canvasProps ? canvasProps.children : <></>}\n        </Canvas>\n      );\n    }\n  }\n\n  return (\n    <EditorCanvas>\n      <Controls />\n      <axesHelper />\n      <ambientLight />\n      <pointLight position={[10, 10, 10]} />\n      {building.levels.map((level) => renderLevel(level))}\n    </EditorCanvas>\n  )\n}\n","import React from 'react';\nimport { makeStyles, withStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport ToolBar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Grid from '@material-ui/core/Grid';\n\nimport OpenDialog from './OpenDialog';\nimport BuildingSummary from './BuildingSummary';\nimport { BuildingContext } from './BuildingContext';\nimport { Building } from './Building';\nimport EditorScene from './EditorScene';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    flexGrow: 1,\n    minHeight: '100vh',\n  },\n  flex: {\n    flex: 1\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20\n  },\n  toolbarMargin: theme.mixins.toolbar,\n  workingArea: {\n    backgroundColor: \"black\",\n    height: `calc(100vh - 64px)`,\n  },\n}));\n\nconst StyledToggleButtonGroup = withStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: theme.palette.primary.light,\n    padding: theme.spacing(0.5)\n  },\n  grouped: {\n    //marginRight: theme.spacing(0.5),\n    //marginLeft: theme.spacing(0.5),\n    //margin: theme.spacing(0.5),\n    color: theme.palette.primary.contrastText,\n    //background: theme.palette.primary.dark,\n    \"&.Mui-selected:hover, &:hover\": {\n      background: theme.palette.primary.dark,\n    },\n    \"&.Mui-selected\": {\n      background: theme.palette.primary.dark,\n      color: theme.palette.primary.contrastText\n    },\n    /*\n    '&:not(:first-child)': {\n      borderRadius: '5px',\n    },\n    '&:first-child': {\n      borderRadius: '5px',\n    },\n    */\n  }\n}))(ToggleButtonGroup);\n\nexport default function App(props: React.PropsWithChildren<{}>): JSX.Element {\n  const [menuAnchorEl, setMenuAnchorEl] = React.useState(null);\n  const [isOpenDialogOpen, setIsOpenDialogOpen] = React.useState(false);\n  const [building, updateBuilding] = React.useState<Building>(new Building());\n  const [editorMode, setEditorMode] = React.useState<string>('3d');\n\n  const onModeChange = (event: React.MouseEvent<HTMLElement>, newMode: string | null) => {\n    if (newMode !== null)\n      setEditorMode(newMode);\n  };\n\n  const classes = useStyles(props);\n\n  return (\n    <div className={classes.root}>\n      <BuildingContext.Provider value={{ building, updateBuilding }}>\n        <AppBar position=\"fixed\">\n          <ToolBar>\n            <IconButton\n              className={classes.menuButton}\n              color=\"inherit\"\n              aria-label=\"Menu\"\n              onClick={(e: any) => { setMenuAnchorEl(e.currentTarget); }}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Menu\n              keepMounted\n              anchorEl={menuAnchorEl}\n              open={Boolean(menuAnchorEl)}\n              onClose={() => setMenuAnchorEl(null)}\n              getContentAnchorEl={null}\n              anchorOrigin={{vertical: 'bottom', horizontal: 'center'}}\n              transformOrigin={{vertical: 'top', horizontal: 'center'}}\n              transitionDuration={0.0}\n            >\n              <MenuItem\n                onClick={async () => {\n                  updateBuilding(await Building.fromURL('http://localhost:8000/map_file'));\n                  setMenuAnchorEl(null);\n                }}\n              >\n                Open map from localhost:8000\n              </MenuItem>\n              <MenuItem\n                onClick={async () => {\n                  updateBuilding(await Building.fromDemo('office'));\n                  setMenuAnchorEl(null);\n                }}\n              >\n                Open demo map\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  setIsOpenDialogOpen(true);\n                  setMenuAnchorEl(null);\n                }}\n              >\n                Open map from local file...\n              </MenuItem>\n            </Menu>\n            <Typography variant=\"h6\" color=\"inherit\" className={classes.flex}>\n              Traffic Editor\n            </Typography>\n            <StyledToggleButtonGroup\n              value={editorMode}\n              size=\"small\"\n              exclusive\n              onChange={onModeChange}\n              aria-label=\"editor mode\"\n            >\n              <ToggleButton value=\"3d\">3D</ToggleButton>\n              <ToggleButton value=\"2d\">2D</ToggleButton>\n            </StyledToggleButtonGroup>\n          </ToolBar>\n        </AppBar>\n        <div className={classes.toolbarMargin} />\n        <OpenDialog\n          open={isOpenDialogOpen}\n          onOpen={() => setIsOpenDialogOpen(false)}\n          onCancel={() => setIsOpenDialogOpen(false)}\n        />\n        <Grid container spacing={0}>\n          <Grid item xs={3}>\n            <BuildingSummary />\n          </Grid>\n          <Grid item xs={9} className={classes.workingArea}>\n            <EditorScene mode={editorMode} />\n          </Grid>\n        </Grid>\n      </BuildingContext.Provider>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}