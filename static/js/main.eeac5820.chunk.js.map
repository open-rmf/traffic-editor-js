{"version":3,"sources":["EditorStore.ts","BuildingSummary.tsx","SceneVertex.tsx","SceneWall.tsx","SceneFloor.tsx","SceneLane.tsx","SceneLevel.tsx","SceneBuilding.tsx","EditorScene.tsx","PropertyEditor.tsx","YAMLParser.ts","OpenDialog.tsx","MainMenu.tsx","App.tsx","index.tsx"],"names":["EditorToolID","useStore","create","set","building","name","levels","params","uuid","selection","editorMode","enableMotionControls","activeTool","SELECT","cameraInitialPose","position","THREE","target","fn","produce","setSelection","setStore","newSelection","state","clearSelection","setActiveTool","newTool","updateVertexPoint","level_uuid","vertex_uuid","x","y","map","level","vertices","vertex","BuildingSummary","style","margin","renderParam","param","TreeItem","nodeId","label","value","renderLevel","onClick","event","renderVertex","lanes","lane","start_idx","end_idx","renderLane","walls","wall","renderWall","floors","floor","vertex_indices","idx","toString","join","renderFloor","TreeView","defaultCollapseIcon","defaultExpandIcon","SceneVertex","props","isMoveToolActive","MOVE","React","useState","dragActive","setDragActive","color","elevation","scale","rotation","Math","PI","stopPropagation","onPointerDown","setPointerCapture","pointerId","onPointerUp","releasePointerCapture","onPointerMove","px","unprojectedPoint","py","intersection_point","ray","intersectPlane","args","SceneWall","v1","vertex_start","v2","vertex_end","cx","cy","dx","dy","len","sqrt","xyrot","atan2","useMemo","setRGB","SceneFloor","shape","started","v","lineTo","moveTo","v0","console","log","SceneLane","SceneLevel","z","SceneBuilding","EditorScene","Controls","DefaultUp","perspective_camera","useRef","orthographic_camera","PerspectiveCamera","ref","fov","makeDefault","OrthographicCamera","zoom","OrbitControls","enableDamping","screenSpacePanning","camera","current","maxPolarAngle","Infinity","minAzimuthAngle","maxAzimuthAngle","mouseButtons","LEFT","MIDDLE","PAN","RIGHT","ROTATE","touches","ONE","TWO","enabled","frameloop","onPointerMissed","useStyles","makeStyles","theme","noSelectionDiv","table","padding","tableHead","tableHeadRow","borderBottomStyle","borderBottom","borderBottomColor","palette","primary","main","tableHeadCell","fontWeight","paddingLeft","tableCell","PropertyEditor","classes","className","rows","TableRow","TableCell","Table","TableHead","TableBody","ParamArrayFactory","params_data","Array","param_name","param_data","p","type_idx","generate_uuid","push","LevelFactory","level_name","level_data","images","image","filename","offset","yaw","isLegacyDefaultImage","vertex_data","wall_data","floor_data","vertex_idx","lane_data","computeInitialCameraPose","bb","vec_min","vec_max","computeBoundingBox","min","max","YAMLParser","yaml_text","yaml","YAML","parse","BuildingFactory","setState","YAMLRetriever","uri","a","fetch","then","response","text","YAMLRetrieveDemo","process","directoryButton","fontSize","typography","h5","textDecoration","dialog","backgroundColor","background","paper","OpenDialog","buildingFileNames","setBuildingFileNames","directoryHandle","setDirectoryHandle","onDirectoryClick","window","showDirectoryPicker","handle","entry","endsWith","previous","values","loadFile","getFileHandle","fileHandle","getFile","file","onOpen","Dialog","open","onClose","onCancel","DialogTitle","DialogContent","Button","variant","length","List","subheader","ListSubheader","component","ListItem","button","ListItemIcon","ListItemText","e","buildingFileList","DialogActions","StyledToggleButtonGroup","withStyles","root","light","spacing","marginRight","grouped","contrastText","dark","ToggleButtonGroup","flex","menuButton","marginLeft","appTitle","filler","MainMenu","menuAnchorEl","setMenuAnchorEl","isOpenDialogOpen","setIsOpenDialogOpen","saveErrorOpen","setSaveErrorOpen","mapType","setMapType","saveErrorMessage","setSaveErrorMessage","save","useCallback","saveErrorClose","useEffect","keyDown","key","toLowerCase","ctrlKey","preventDefault","addEventListener","removeEventListener","AppBar","IconButton","aria-label","currentTarget","keepMounted","anchorEl","Boolean","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","transitionDuration","MenuItem","Divider","Typography","size","exclusive","onChange","ToggleButton","Tooltip","title","newMode","setEditorMode","Snackbar","autoHideDuration","TransitionProps","appear","action","Fragment","severity","flexGrow","minHeight","toolbarMargin","mixins","toolbar","workingArea","height","gridLeftColumn","borderRight","borderRightStyle","borderRightColor","propertyGridItem","borderTop","borderTopStyle","borderTopColor","App","Grid","container","xs","direction","item","overflow","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eeac5820.chunk.js","sourcesContent":["import create from 'zustand';\nimport produce from 'immer';\nimport * as THREE from 'three';\n\nexport interface EditorParam {\n  type_idx: number,\n  name: string,\n  value: any,\n  uuid: string\n}\n\nexport interface EditorObject {\n  uuid: string,\n  params: EditorParam[],\n}\n\nexport interface EditorVertex extends EditorObject {\n  x: number,\n  y: number,\n  name: string,\n}\n\nexport interface EditorWall extends EditorObject {\n  start_idx: number,\n  end_idx: number,\n}\n\nexport interface EditorLane extends EditorObject {\n  start_idx: number,\n  end_idx: number,\n}\n\nexport interface EditorFloor extends EditorObject {\n  vertex_indices: number[],\n}\n\nexport interface EditorImage extends EditorObject {\n  filename: string,\n  offset: THREE.Vector3,\n  yaw: number,\n  scale: number,\n  isLegacyDefaultImage: boolean,\n}\n\nexport interface EditorLevel extends EditorObject {\n  name: string,\n  elevation: number,\n  vertices: EditorVertex[],\n  walls: EditorWall[],\n  floors: EditorFloor[],\n  lanes: EditorLane[],\n  images: EditorImage[],\n}\n\nexport interface EditorBuilding extends EditorObject {\n  name: string,\n  levels: EditorLevel[],\n}\n\nexport enum EditorToolID {\n  SELECT,\n  MOVE,\n}\n\nexport interface CameraPose {\n  position: THREE.Vector3,\n  target: THREE.Vector3\n}\n\nexport interface EditorStoreState {\n  building: EditorBuilding,\n  selection: EditorObject | null,\n  editorMode: string,\n  enableMotionControls: boolean,\n  activeTool: EditorToolID,\n  cameraInitialPose: CameraPose,\n  set: (fn: (draftState: EditorStoreState) => void) => void\n}\n/*\n\n  setSelection: (newSelection: EditorObject) => void,\n  clearSelection: () => void,\n  setEditorMode: (newEditorMode: string) => void,\n\n  setEnableMotionControls: (newEnableMotionControls: boolean) => void,\n\n  setActiveTool: (newActiveTool: EditorToolID) => void,\n\n  //updateVertexPoint: (level_uuid: string, vertex_uuid: string, x: number, y:number) => void,\n}\n*/\n\nexport const useStore = create<EditorStoreState>(set => ({\n  building: {\n    name: '',\n    levels: [],\n    params: [],\n    uuid: '',\n  },\n  selection: null,\n  editorMode: '2d',\n  enableMotionControls: true,\n  activeTool: EditorToolID.SELECT,\n  cameraInitialPose: {\n    position: new THREE.Vector3(0, 0, 5),\n    target: new THREE.Vector3(0, 0, 0),\n  },\n  set: fn => set(produce(fn)),\n}));\n\ntype StoreSetter = (fn: (draftState: EditorStoreState) => void) => void;\n\nexport function setSelection(setStore: StoreSetter, newSelection: EditorObject) {\n  setStore(state => {\n    state.selection = newSelection;\n  });\n}\n\nexport function clearSelection(setStore: StoreSetter) {\n  setStore(state => {\n    state.selection = null;\n  });\n}\n\nexport function setEditorMode(setStore: StoreSetter, newMode: string) {\n  setStore(state => {\n    state.editorMode = newMode;\n  });\n}\n\nexport function setActiveTool(setStore: StoreSetter, newTool: EditorToolID) {\n  setStore(state => {\n    state.activeTool = newTool;\n  });\n}\n\nexport function updateVertexPoint(\n  setStore: StoreSetter,\n  level_uuid: string,\n  vertex_uuid: string,\n  x: number,\n  y: number) {\n  setStore(state => {\n    state.building.levels.map(level => {\n      if (level.uuid === level_uuid) {\n        level.vertices.map(vertex => {\n          if (vertex.uuid === vertex_uuid) {\n            vertex.x = x;\n            vertex.y = y;\n            return vertex;\n          }\n          return vertex;\n        })\n        return level;\n      }\n      return level;\n    })\n  });\n}\n\n/*\n  const setStoreState = useStore(state => state.set);\n  const setSelection = useStore(state => state.setSelection);\n*/\n\n/*\n  setSelection: (newSelection: EditorObject) => set(state => ({ selection: newSelection })),\n  clearSelection: () => set(state => ({ selection: null })),\n\n  setEditorMode: (newEditorMode: string) => set(state => ({ editorMode: newEditorMode })),\n\n  setEnableMotionControls: (newEnableMotionControls: boolean) => set(state => ({ enableMotionControls: newEnableMotionControls })),\n\n  setActiveTool: (newActiveTool: EditorToolID) => set(state => ({ activeTool: newActiveTool })),\n\n  //updateVertexPoint: (level_uuid: string, vertex_uuid: string, x: number, y:number) => set(state => {\n}))\n*/\n","import React from 'react';\nimport { useStore, EditorWall, EditorLane, EditorFloor, EditorLevel, EditorVertex, EditorParam, setSelection } from './EditorStore'\nimport TreeView from '@material-ui/lab/TreeView';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\n\nexport default function BuildingSummary(): JSX.Element {\n  const building = useStore(state => state.building);\n  const setStore = useStore(state => state.set);\n\n  if (building.name === '') {\n    return (\n      <div style={{margin: '1em'}}>\n        <p>\n          No map loaded.\n        </p>\n        <p>\n          To load a map, click the menu icon in the upper-left.\n        </p>\n      </div>\n    );\n  }\n \n  const renderFloor = (floor: EditorFloor): JSX.Element => {\n    let label = 'floor (';\n    label += floor.vertex_indices.map((idx) => idx.toString()).join(', ') + ')';\n    return(\n      <TreeItem\n        nodeId={floor.uuid}\n        key={floor.uuid}\n        label={label}\n        onClick={(event) => {\n          setSelection(setStore, floor);\n        }}\n      >\n        {floor.params.map((param) => renderParam(param))}\n      </TreeItem>\n    );\n  }\n\n  const renderWall = (wall: EditorWall): JSX.Element => {\n    let label = `(${wall.start_idx} => ${wall.end_idx})`;\n    return(\n      <TreeItem\n        nodeId={wall.uuid}\n        key={wall.uuid}\n        onClick={(event) => {\n          setSelection(setStore, wall);\n        }}\n        label={label} />\n    );\n  }\n\n  const renderLane = (lane: EditorLane): JSX.Element => {\n    let label = `(${lane.start_idx} => ${lane.end_idx})`;\n    return(\n      <TreeItem\n        nodeId={lane.uuid}\n        key={lane.uuid}\n        label={label}\n        onClick={(event) => {\n          setSelection(setStore, lane);\n        }}\n      />\n    );\n  }\n\n  const renderParam = (param: EditorParam): JSX.Element => {\n    return (\n      <TreeItem\n        nodeId={param.uuid}\n        key={param.uuid}\n        label={`${param.name}=${param.value}`} />\n    );\n  }\n\n  const renderVertex = (vertex: EditorVertex): JSX.Element => {\n    let label = \"(\" + vertex.x + \", \" + vertex.y + \")\";\n    if (vertex.name)\n      label = vertex.name + ': ' + label;\n    return (\n      <TreeItem\n        nodeId={vertex.uuid}\n        key={vertex.uuid}\n        onClick={(event) => {\n          setSelection(setStore, vertex);\n        }}\n        label={label}>\n        {vertex.params.map((param) => renderParam(param))}\n      </TreeItem>\n    );\n  }\n\n  const renderLevel = (level: EditorLevel): JSX.Element => {\n    return (\n      <TreeItem nodeId={level.uuid} key={level.uuid} label={level.name}>\n        <TreeItem nodeId={level.uuid + '_vertices'} label=\"vertices\">\n          {level.vertices.map((vertex) => renderVertex(vertex))}\n        </TreeItem>\n        <TreeItem nodeId={level.uuid + '_lanes'} label=\"lanes\">\n          {level.lanes.map((lane) => renderLane(lane))}\n        </TreeItem>\n        <TreeItem nodeId={level.uuid + '_walls'} label=\"walls\">\n          {level.walls.map((wall) => renderWall(wall))}\n        </TreeItem>\n        <TreeItem nodeId={level.uuid + '_floors'} label=\"floors\">\n          {level.floors.map((floor) => renderFloor(floor))}\n        </TreeItem>\n      </TreeItem>\n    );\n  }\n\n  // defaultExpanded={[building.uuid + '_levels']}\n  return (\n    <TreeView\n      defaultCollapseIcon={<ExpandMoreIcon />}\n      defaultExpandIcon={<ChevronRightIcon />}\n    >\n      <TreeItem nodeId={building.uuid + '_name'} label={\"name: \" + building.name} />\n      <TreeItem nodeId={building.uuid + '_levels'} label=\"levels\">\n        {building.levels.map((level) => renderLevel(level))}\n      </TreeItem>\n    </TreeView>\n  );\n\n  /*\n  return (\n    <div>building summary goes here</div>\n  );\n  */\n}\n","import React from 'react'\nimport * as THREE from 'three'\nimport { useStore, EditorVertex, EditorToolID, setSelection, updateVertexPoint } from './EditorStore';\n\ninterface SceneVertexProps {\n  vertex: EditorVertex,\n  elevation: number,\n  level_uuid: string,\n}\n\nexport function SceneVertex(props: SceneVertexProps): JSX.Element {\n  const selection = useStore(state => state.selection);\n  const setStore = useStore(state => state.set);\n  const editorMode = useStore(state => state.editorMode);\n  const isMoveToolActive = useStore(state => state.activeTool === EditorToolID.MOVE);\n  const [ dragActive, setDragActive ] = React.useState(false);\n\n  const x = props.vertex.x / 50.0;\n  const y = props.vertex.y / 50.0;\n\n  let color = \"rgb(0, 128, 0)\";\n  if (selection && selection.uuid === props.vertex.uuid) {\n    color = \"rgb(255, 100, 10)\";\n  }\n\n  return (\n    <mesh\n      position={[x, y, 0.25 + props.elevation]}\n      scale={1.0}\n      rotation={new THREE.Euler(Math.PI / 2, 0, 0)}\n      key={props.vertex.uuid}\n      onClick={(event) => {\n        event.stopPropagation();\n        setSelection(setStore, props.vertex);\n      }}\n      onPointerDown={(event) => {\n        if (!isMoveToolActive)\n          return;\n        event.stopPropagation();\n        setDragActive(true);\n        if (event.target) {\n          (event.target as HTMLElement).setPointerCapture(event.pointerId);\n        }\n      }}\n      onPointerUp={(event) => {\n        event.stopPropagation();\n        setDragActive(false);\n        if (event.target) {\n          (event.target as HTMLElement).releasePointerCapture(event.pointerId);\n        }\n      }}\n      onPointerMove={(event) => {\n        if (dragActive) {\n          event.stopPropagation();\n          if (editorMode === '2d') {\n            const px = event.unprojectedPoint.x * 50;\n            const py = event.unprojectedPoint.y * 50;\n            updateVertexPoint(setStore, props.level_uuid, props.vertex.uuid, px, py);\n          }\n          else {\n            let intersection_point = new THREE.Vector3();\n            event.ray.intersectPlane(new THREE.Plane(new THREE.Vector3(0, 0, 1), props.elevation), intersection_point);\n            updateVertexPoint(setStore, props.level_uuid, props.vertex.uuid, intersection_point.x * 50, intersection_point.y * 50);\n          }\n        }\n      }}\n    >\n      <cylinderGeometry args={[0.3, 0.3, 0.2, 8]} />\n      <meshStandardMaterial color={color} />\n    </mesh>\n  );\n}\n","import React from 'react'\nimport * as THREE from 'three'\nimport { useStore, EditorVertex, EditorWall, setSelection } from './EditorStore';\n\ninterface SceneWallProps {\n  vertex_start: EditorVertex,\n  vertex_end: EditorVertex,\n  wall: EditorWall,\n  elevation: number,\n}\n\nexport function SceneWall(props: SceneWallProps): JSX.Element {\n  const selection = useStore(state => state.selection)\n  //const setSelection = useStore(state => state.setSelection)\n  const setStore = useStore(state => state.set);\n\n  const v1 = props.vertex_start;\n  const v2 = props.vertex_end;\n  const cx = (v1.x + v2.x) / 2 / 50;\n  const cy = (v1.y + v2.y) / 2 / 50;\n  const dx = v2.x - v1.x;\n  const dy = v2.y - v1.y;\n  const len = Math.sqrt(dx*dx + dy*dy) / 50;\n  const xyrot = Math.atan2(dy, dx);\n\n  const color: THREE.Color = React.useMemo(() => {\n    let color = new THREE.Color(0.1, 0.1, 0.7);\n    if (selection && selection.uuid === props.wall.uuid) {\n      color.setRGB(1, 0.4, 0.1);\n    }\n    return color;\n  }, [selection, props.wall.uuid]);\n\n  return (\n    <mesh\n      position={[cx, cy, 1.0 + props.elevation]}\n      rotation={new THREE.Euler(0, 0, xyrot)}\n      scale={1.0}\n      key={props.wall.uuid}\n      onClick={(event) => {\n        event.stopPropagation();\n        setSelection(setStore, props.wall);\n      }}\n    >\n      <boxGeometry args={[len, 0.1, 2]} />\n      <meshStandardMaterial color={color} />\n    </mesh>\n  );\n}\n","import React from 'react'\nimport * as THREE from 'three'\nimport { useStore, EditorVertex, EditorFloor, setSelection } from './EditorStore';\n\ntype SceneFloorProps = {\n  floor: EditorFloor;\n  vertices: EditorVertex[];\n  elevation: number;\n}\n\nexport function SceneFloor(props: SceneFloorProps): JSX.Element {\n  const selection = useStore(state => state.selection)\n  const setStore = useStore(state => state.set);\n  //const setSelection = useStore(state => state.setSelection)\n\n  const shape = React.useMemo(() => {\n    const shape = new THREE.Shape();\n    let started = false;\n\n    for (const v of props.vertices) {\n      if (!started)\n      {\n        shape.moveTo(v.x / 50, v.y / 50)\n        started = true\n      }\n      else\n        shape.lineTo(v.x / 50, v.y / 50)\n    }\n    const v0 = props.vertices[0]\n    shape.lineTo(v0.x / 50, v0.y / 50)\n    return shape\n  }, [props.vertices])\n\n  const color: THREE.Color = React.useMemo(() => {\n    let color = new THREE.Color(1, 1, 1)\n    if (selection && selection.uuid === props.floor.uuid) {\n      color.setRGB(1, 0.4, 0.1)\n    }\n    return color;\n  }, [selection, props.floor.uuid]);\n\n  return (\n    <mesh\n      key={props.floor.uuid}\n      onClick={(event) => {\n        event.stopPropagation()\n        console.log('floor onClick')\n        setSelection(setStore, props.floor)\n      }}\n    >\n      <extrudeGeometry args={[shape, { 'depth': 0.1, 'bevelEnabled': false } ]} />\n      <meshStandardMaterial color={color} />\n    </mesh>\n  );\n\n  /*\n  return (\n    <gridHelper\n      args={[100, 100]}\n      rotation={new THREE.Euler(Math.PI / 2, 0, 0)}\n      position={new THREE.Vector3(50, -50, elevation)}/>\n  );\n   */\n}\n","import React from 'react'\nimport * as THREE from 'three'\nimport { useStore, EditorVertex, EditorLane, setSelection } from './EditorStore';\n\ninterface SceneLaneProps {\n  vertex_start: EditorVertex,\n  vertex_end: EditorVertex,\n  lane: EditorLane,\n  elevation: number,\n}\n\nexport function SceneLane(props: SceneLaneProps): JSX.Element {\n  const selection = useStore(state => state.selection)\n  const setStore = useStore(state => state.set);\n  //const setSelection = useStore(state => state.setSelection)\n\n  const v1 = props.vertex_start;\n  const v2 = props.vertex_end;\n  const cx = (v1.x + v2.x) / 2 / 50;\n  const cy = (v1.y + v2.y) / 2 / 50;\n  const dx = v2.x - v1.x;\n  const dy = v2.y - v1.y;\n  const len = Math.sqrt(dx*dx + dy*dy) / 50;\n  const xyrot = Math.atan2(dy, dx);\n\n  const color: THREE.Color = React.useMemo(() => {\n    let color = new THREE.Color(0.4, 0.05, 0.05);\n    if (selection && selection.uuid === props.lane.uuid) {\n      color.setRGB(0.8, 0.3, 0.01);\n    }\n    return color;\n  }, [selection, props.lane.uuid]);\n\n  return (\n    <mesh\n      position={[cx, cy, 0.2 + props.elevation]}\n      rotation={new THREE.Euler(0, 0, xyrot)}\n      scale={1.0}\n      key={props.lane.uuid}\n      onClick={(event) => {\n        event.stopPropagation();\n        setSelection(setStore, props.lane);\n      }}\n    >\n      <boxGeometry args={[len, 1.0, 0.1]} />\n      <meshStandardMaterial color={color} />\n    </mesh>\n  );\n}\n","import React from 'react'\nimport { EditorLevel } from './EditorStore';\nimport { SceneVertex } from './SceneVertex';\nimport { SceneWall } from './SceneWall';\nimport { SceneFloor } from './SceneFloor';\nimport { SceneLane } from './SceneLane';\nimport { useStore } from './EditorStore';\n\ntype SceneLevelProps = {\n  level: EditorLevel\n}\n\nexport function SceneLevel(props: SceneLevelProps): JSX.Element {\n  const z = props.level.elevation / 2;\n  useStore(state => state.selection);  // needed to ensure repaints after de-selection\n\n  const vertices =\n    props.level.vertices.map((vertex) =>\n      <SceneVertex\n        key={vertex.uuid}\n        vertex={vertex}\n        level_uuid={props.level.uuid}\n        elevation={z} />\n    );\n\n  const walls =\n    props.level.walls.map((wall) =>\n      <SceneWall\n        key={wall.uuid}\n        wall={wall}\n        vertex_start={props.level.vertices[wall.start_idx]}\n        vertex_end={props.level.vertices[wall.end_idx]}\n        elevation={z} />\n    );\n\n  const floors =\n    props.level.floors.map((floor) =>\n      <SceneFloor\n        key={floor.uuid}\n        floor={floor}\n        vertices={floor.vertex_indices.map((idx) => props.level.vertices[idx])}\n        elevation={z} />\n    );\n\n  const lanes =\n    props.level.lanes.map((lane) =>\n      <SceneLane\n        key={lane.uuid}\n        lane={lane}\n        vertex_start={props.level.vertices[lane.start_idx]}\n        vertex_end={props.level.vertices[lane.end_idx]}\n        elevation={z} />\n    );\n\n  return (\n    <group>\n      {[\n        ...vertices,\n        ...walls,\n        ...floors,\n        ...lanes,\n      ]}\n    </group>\n  );\n}\n","import React from 'react'\nimport { useStore } from './EditorStore';\nimport { SceneLevel } from './SceneLevel';\n\ntype SceneBuildingProps = {\n}\n\nexport function SceneBuilding(props: SceneBuildingProps): JSX.Element {\n  const building = useStore(state => state.building);\n  useStore(state => state.selection);  // needed to ensure repaints after de-selection\n\n  return (\n    <group>\n      {building.levels.map((level) => <SceneLevel key={level.uuid} level={level} />)}\n    </group>\n  );\n}\n","import * as THREE from 'three'\nimport { Canvas } from '@react-three/fiber'\nimport React, { useRef } from 'react'\nimport { OrbitControls } from '@react-three/drei'\nimport { PerspectiveCamera, OrthographicCamera } from '@react-three/drei'\n\nimport { useStore, clearSelection } from './EditorStore';\nimport { SceneBuilding } from './SceneBuilding';\n\ntype EditorSceneProps = {\n};\n\nexport function EditorScene(props: EditorSceneProps): JSX.Element {\n  const setStore = useStore(state => state.set);\n  //const clearSelection = useStore(state => state.clearSelection);\n  const editorMode = useStore(state => state.editorMode);\n  const cameraInitialPose = useStore(state => state.cameraInitialPose);\n\n  const Controls = (): JSX.Element => {\n    THREE.Object3D.DefaultUp = new THREE.Vector3(0, 0, 1);\n    const perspective_camera = useRef<THREE.Camera>(null);\n    const orthographic_camera = useRef<THREE.Camera>(null);\n    const enableMotionControls = useStore(state => state.enableMotionControls);\n\n    // todo: there is probably a better way to do this than having two cameras\n    return (\n      <>\n        <PerspectiveCamera\n          ref={perspective_camera}\n          position={cameraInitialPose.position}\n          fov={60}\n          makeDefault={editorMode === '3d'}\n        />\n        <OrthographicCamera\n          ref={orthographic_camera}\n          position={[cameraInitialPose.target.x, cameraInitialPose.target.y, cameraInitialPose.target.z + 5]}\n          zoom={20}\n          makeDefault={editorMode === '2d'}\n        />\n        {perspective_camera && orthographic_camera && <OrbitControls\n          enableDamping={false}\n          screenSpacePanning={editorMode === '3d' ? false : true}\n          target={cameraInitialPose.target}\n          camera={editorMode === '3d' ? perspective_camera.current! : orthographic_camera.current!}\n          maxPolarAngle={editorMode === '3d' ? Infinity : 0}\n          minAzimuthAngle={editorMode === '3d' ? -Infinity : 0}\n          maxAzimuthAngle={editorMode === '3d' ? Infinity : 0}\n          mouseButtons={{\n            LEFT: -1,\n            MIDDLE: THREE.MOUSE.PAN,\n            RIGHT: THREE.MOUSE.ROTATE,\n          }}\n          touches={{\n            ONE: THREE.TOUCH.PAN,\n            TWO: THREE.TOUCH.ROTATE\n          }}\n          enabled={enableMotionControls}\n        />}\n      </>\n    );\n  }\n\n  console.log('EditorScene()');\n  return (\n    <Canvas\n      frameloop=\"demand\"\n      onPointerMissed={() => {\n        clearSelection(setStore);\n      }}\n    >\n      <Controls />\n      <axesHelper />\n      <ambientLight />\n      <pointLight position={[10, 10, 10]} />\n      <SceneBuilding />\n    </Canvas>\n  )\n}\n","import React from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { useStore } from './EditorStore';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  noSelectionDiv: {\n  },\n  table: {\n    padding: '0px',\n    margin: '0px'\n  },\n  tableHead: {\n  },\n  tableHeadRow: {\n    borderBottomStyle: 'solid',\n    borderBottom: '1px',\n    borderBottomColor: theme.palette.primary.main,\n  },\n  tableHeadCell: {\n    fontWeight: 'bold',\n    padding: '0px',\n    paddingLeft: '5px',\n  },\n  tableCell: {\n    padding: '0px',\n    paddingLeft: '5px',\n  }\n}));\n\nexport default function PropertyEditor(): JSX.Element {\n  const classes = useStyles();\n  const selection = useStore(state => state.selection);\n\n  if (!selection) {\n    return (<div className={classes.noSelectionDiv}></div>);\n  }\n\n  let rows = selection.params.map((param) => (\n    <TableRow>\n      <TableCell className={classes.tableCell}>{param.name}</TableCell>\n      <TableCell className={classes.tableCell}>{param.value.toString()}</TableCell>\n    </TableRow>\n  ));\n\n  // todo: add any other class-specific stuff\n\n  return (\n    <Table className={classes.table}>\n      <TableHead className={classes.tableHead}>\n        <TableRow className={classes.tableHeadRow}>\n          <TableCell className={classes.tableHeadCell}>Property Name</TableCell>\n          <TableCell className={classes.tableHeadCell}>Property Value</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {rows}\n      </TableBody>\n    </Table>\n  );\n}\n","import {\n  CameraPose,\n  EditorBuilding,\n  EditorFloor,\n  EditorImage,\n  EditorLane,\n  EditorLevel,\n  EditorParam,\n  EditorVertex,\n  EditorWall,\n  useStore,\n} from './EditorStore'\nimport YAML from 'yaml'\nimport { v4 as generate_uuid } from 'uuid'\nimport * as THREE from 'three'\n\nfunction ParamArrayFactory(params_data: any): EditorParam[] {\n  if (!params_data)\n    return []\n  let params = Array<EditorParam>();\n  for (const param_name in params_data) {\n    const param_data = params_data[param_name];\n    let p: EditorParam = {\n      name: param_name,\n      type_idx: param_data[0],\n      value: param_data[1],\n      uuid: generate_uuid(),\n    }\n    params.push(p)\n  }\n  return params\n}\n\nfunction VertexFactory(vertex_data: any): EditorVertex {\n  return {\n    x: vertex_data[0],\n    y: -vertex_data[1],\n    name: vertex_data[3],\n    uuid: generate_uuid(),\n    params: ParamArrayFactory(vertex_data[4]),\n  }\n}\n\nfunction WallFactory(wall_data: any): EditorWall {\n  return {\n    start_idx: wall_data[0],\n    end_idx: wall_data[1],\n    params: ParamArrayFactory(wall_data[2]),\n    uuid: generate_uuid(),\n  }\n}\n\nfunction FloorFactory(floor_data: any): EditorFloor {\n  return {\n    uuid: generate_uuid(),\n    params: ParamArrayFactory(floor_data['parameters']),\n    vertex_indices: floor_data['vertices'].map((vertex_idx: number) => vertex_idx),\n  }\n}\n\nfunction LaneFactory(lane_data: any): EditorLane {\n  return {\n    uuid: generate_uuid(),\n    start_idx: lane_data[0],\n    end_idx: lane_data[1],\n    params: ParamArrayFactory(lane_data[2]),\n  }\n}\n\nfunction LevelFactory(level_name: string, level_data: any): EditorLevel {\n  let images = new Array<EditorImage>();\n  if (level_data['drawing'] && level_data['drawing']['fileanme']) {\n    let image: EditorImage = {\n      filename: level_data['drawing']['filename'],\n      offset: new THREE.Vector3(0, 0, 0),\n      yaw: 0,\n      scale: 1,\n      isLegacyDefaultImage: true,\n      uuid: generate_uuid(),\n      params: Array<EditorParam>(),\n    }\n    images.push(image);\n  }\n\n  return {\n    uuid: generate_uuid(),\n    name: level_name,\n    elevation: level_data['elevation'],\n    params: Array<EditorParam>(),\n    images: images,\n    vertices: level_data['vertices'].map((vertex: any) => VertexFactory(vertex)),\n    walls: level_data['walls'].map((wall: any) => WallFactory(wall)),\n    floors: level_data['floors'].map((floor: any) => FloorFactory(floor)),\n    lanes: level_data['lanes'].map((lane: any) => LaneFactory(lane)),\n  }\n}\n\nfunction BuildingFactory(yaml_text: string): EditorBuilding {\n  const yaml = YAML.parse(yaml_text)\n  const name = yaml['name']  // todo: make up a name if it's not here\n  let building = {\n    name: name,\n    levels: Array<EditorLevel>(), //[],\n    params: [],\n    uuid: generate_uuid()\n  }\n  for (const level_name in yaml['levels']) {\n    const level_data = yaml['levels'][level_name]\n    building.levels.push(LevelFactory(level_name, level_data));\n  }\n\n  return building\n}\n\nfunction computeBoundingBox(building: EditorBuilding): THREE.Box3 {\n  let vec_min = new THREE.Vector3(Infinity, Infinity, Infinity);\n  let vec_max = new THREE.Vector3(-Infinity, -Infinity, -Infinity);\n  for (const level of building.levels) {\n    for (const vertex of level.vertices) {\n      if (vertex.x < vec_min.x)\n        vec_min.x = vertex.x;\n      if (vertex.x > vec_max.x)\n        vec_max.x = vertex.x;\n\n      if (vertex.y < vec_min.y)\n        vec_min.y = vertex.y;\n      if (vertex.y > vec_max.y)\n        vec_max.y = vertex.y;\n    }\n  }\n  return new THREE.Box3(vec_min, vec_max);\n}\n\nexport function computeInitialCameraPose(building: EditorBuilding): CameraPose {\n  const bb: THREE.Box3 = computeBoundingBox(building);\n  const target = new THREE.Vector3(\n    (bb.min.x + bb.max.x) / 2.0 / 50,\n    (bb.min.y + bb.max.y) / 2.0 / 50,\n    0.0);\n  const position = new THREE.Vector3(\n    target.x + 10,\n    target.y - 10,\n    target.z + 10);\n  return {\n    position: position,\n    target: target\n  };\n}\n\nexport function YAMLParser(yaml_text: string): void {\n  const building = BuildingFactory(yaml_text);\n  const cameraInitialPose = computeInitialCameraPose(building);\n\n  useStore.setState({\n    building: building,\n    selection: null,\n    cameraInitialPose: cameraInitialPose\n  });\n}\n\nexport async function YAMLRetriever(uri: string): Promise<void> {\n  await fetch(uri)\n    .then(response => response.text())\n    .then(text => YAMLParser(text));\n}\n\nexport async function YAMLRetrieveDemo(name: string): Promise<void> {\n  await YAMLRetriever(\n    process.env.PUBLIC_URL + `/demos/${name}/${name}.building.yaml`);\n}\n","import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport List from '@material-ui/core/List';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MapIcon from '@material-ui/icons/Map';\n\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { YAMLParser } from './YAMLParser';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  directoryButton: {\n    fontSize: theme.typography.h5.fontSize\n  },\n  filename: {\n    fontSize: theme.typography.h5.fontSize,\n    textDecoration: 'underline'\n  },\n  dialog: {\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\ntype OpenDialogProps = {\n  open: boolean;\n  onOpen: () => void; //filename: string, handle: FileSystemDirectoryHandle | undefined) => void;\n  onCancel: () => void;\n};\n\nexport default function OpenDialog(props: OpenDialogProps): JSX.Element {\n  const classes = useStyles(props);\n  const [buildingFileNames, setBuildingFileNames] = React.useState<string[]>([]);\n  const [directoryHandle, setDirectoryHandle] = React.useState<FileSystemDirectoryHandle>();\n\n  const onDirectoryClick = async () => {\n    setBuildingFileNames([]);\n    const handle = await window.showDirectoryPicker();\n    await setDirectoryHandle(handle);\n    for await (const entry of handle.values()) {\n      if (entry.name.endsWith('.building.yaml'))\n        setBuildingFileNames(previous => [...previous, entry.name]);\n    }\n  }\n\n  const loadFile = async(filename: string) => {\n    if (directoryHandle) {\n      const fileHandle = await directoryHandle.getFileHandle(filename);\n      const file = await fileHandle.getFile();\n      const text = await file.text();\n      YAMLParser(text);\n    }\n    props.onOpen();\n  }\n\n  const buildingFileList = () => {\n    if (buildingFileNames.length > 0)\n      return (\n        <div>\n          <List\n            subheader={\n              <ListSubheader component=\"div\">\n                Available Files\n              </ListSubheader>\n            }\n          >\n            {buildingFileNames.map((filename) =>\n              <ListItem button key={filename}>\n                <ListItemIcon>\n                  <MapIcon />\n                </ListItemIcon>\n                <ListItemText primary={filename} onClick={e => {loadFile(filename)}} />\n              </ListItem>)\n            }\n          </List>\n        </div>\n      );\n  }\n\n  return (\n    <Dialog open={props.open} onClose={props.onCancel}>\n      <DialogTitle>Open Building Map</DialogTitle>\n      <DialogContent className={classes.dialog}>\n        <Button variant=\"contained\" color=\"primary\" onClick={onDirectoryClick}>\n          Select Directory...\n        </Button>\n        {buildingFileList()}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={props.onCancel} color=\"primary\">\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React, { useCallback } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Divider from '@material-ui/core/Divider';\nimport ToolBar from '@material-ui/core/Toolbar';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, withStyles, Theme } from '@material-ui/core/styles';\nimport { useStore, EditorToolID, setEditorMode, clearSelection, setActiveTool } from './EditorStore';\nimport OpenDialog from './OpenDialog';\nimport { YAMLRetriever, YAMLRetrieveDemo } from './YAMLParser';\nimport OpenWithIcon from '@material-ui/icons/OpenWith';\nimport PanToolIcon from '@material-ui/icons/PanTool';\n\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\nimport SaveIcon from '@material-ui/icons/Save';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst StyledToggleButtonGroup = withStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: theme.palette.primary.light,\n    padding: theme.spacing(0.5),\n    marginRight: 5\n  },\n  grouped: {\n    //marginRight: theme.spacing(0.5),\n    //marginLeft: theme.spacing(0.5),\n    //margin: theme.spacing(0.5),\n    color: theme.palette.primary.contrastText,\n    //background: theme.palette.primary.dark,\n    \"&.Mui-selected:hover, &:hover\": {\n      background: theme.palette.primary.dark,\n    },\n    \"&.Mui-selected\": {\n      background: theme.palette.primary.dark,\n      color: theme.palette.primary.contrastText\n    },\n    /*\n    '&:not(:first-child)': {\n      borderRadius: '5px',\n    },\n    '&:first-child': {\n      borderRadius: '5px',\n    },\n    */\n  },\n}))(ToggleButtonGroup);\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  flex: {\n    flex: 1\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20\n  },\n  appTitle: {\n    marginRight: 20\n  },\n  filler: {\n    flex: 1\n  }\n}));\n\n\nexport default function MainMenu(props: React.PropsWithChildren<{}>): JSX.Element {\n  const classes = useStyles(props);\n  const [menuAnchorEl, setMenuAnchorEl] = React.useState(null);\n  const [isOpenDialogOpen, setIsOpenDialogOpen] = React.useState(false);\n  const [saveErrorOpen, setSaveErrorOpen] = React.useState(false);\n  const [mapType, setMapType] = React.useState('');\n  const [saveErrorMessage, setSaveErrorMessage] = React.useState('');\n  const setStore = useStore(state => state.set);\n  const editorMode = useStore(state => state.editorMode);\n  const activeTool = useStore(state => state.activeTool);\n  //const setEditorMode = useStore(state => state.setEditorMode);\n  //const setActiveTool = useStore(state => state.setActiveTool);\n  //const clearSelection = useStore(state => state.clearSelection);\n\n  const onModeChange = (event: React.MouseEvent<HTMLElement>, newMode: string | null) => {\n    if (newMode !== null) {\n      setEditorMode(setStore, newMode);\n      clearSelection(setStore);\n    }\n  };\n\n  const onToolChange = (event: React.MouseEvent<HTMLElement>, newTool: EditorToolID | null) => {\n    if (newTool !== null) {\n      setActiveTool(setStore, newTool);\n      clearSelection(setStore);\n    }\n  }\n\n  const save = useCallback(\n    () => {\n      if (mapType === 'local_file') {\n        setSaveErrorMessage('Cannot save. Local file save not yet implemented.');\n      }\n      else if (mapType === 'local_rest') {\n        setSaveErrorMessage('Cannot save. Local REST server save not yet implemented.');\n      }\n      else if (mapType === 'demo') {\n        setSaveErrorMessage('Cannot save. Demo maps are read-only.');\n      }\n      else {\n        setSaveErrorMessage('Cannot save. No map loaded.');\n      }\n      setSaveErrorOpen(true);\n    },\n    [mapType]\n  );\n\n  const saveErrorClose = () => {\n    setSaveErrorOpen(false);\n  }\n\n  React.useEffect(() => {\n    const keyDown = (event: KeyboardEvent) => {\n      let key = event.key.toLowerCase();\n      if (key === 'm') {\n        setActiveTool(setStore, EditorToolID.MOVE);\n        clearSelection(setStore);\n      } else if (key === 'escape') {\n        setActiveTool(setStore, EditorToolID.SELECT);\n        clearSelection(setStore);\n      } else if (key === 's' && event.ctrlKey) {\n        event.preventDefault();\n        save();\n        return false;\n      }\n    };\n\n    window.addEventListener('keydown', keyDown);\n    return () => {\n      window.removeEventListener('keydown', keyDown);\n    };\n  }, [setStore, save]);\n\n  return (\n    <AppBar position=\"fixed\">\n      <ToolBar>\n        <IconButton\n          className={classes.menuButton}\n          color=\"inherit\"\n          aria-label=\"Menu\"\n          onClick={(e: any) => { setMenuAnchorEl(e.currentTarget); }}\n        >\n          <MenuIcon />\n        </IconButton>\n        <Menu\n          keepMounted\n          anchorEl={menuAnchorEl}\n          open={Boolean(menuAnchorEl)}\n          onClose={() => setMenuAnchorEl(null)}\n          getContentAnchorEl={null}\n          anchorOrigin={{vertical: 'bottom', horizontal: 'center'}}\n          transformOrigin={{vertical: 'top', horizontal: 'center'}}\n          transitionDuration={0.0}\n        >\n          <MenuItem\n            onClick={async () => {\n              await YAMLRetriever('http://localhost:8000/map_file');\n              setMapType('local_rest');\n              setMenuAnchorEl(null);\n            }}\n          >\n            <ListItemIcon>\n              <FolderOpenIcon />\n            </ListItemIcon>\n            <ListItemText>\n              Open map from localhost:8000\n            </ListItemText>\n          </MenuItem>\n          <MenuItem\n            onClick={async () => {\n              await YAMLRetrieveDemo('office');\n              setMapType('demo');\n              setMenuAnchorEl(null);\n            }}\n          >\n            <ListItemIcon>\n              <FolderOpenIcon />\n            </ListItemIcon>\n            <ListItemText>\n              Open demo map\n            </ListItemText>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              setIsOpenDialogOpen(true);\n              setMapType('local_file');\n              setMenuAnchorEl(null);\n            }}\n          >\n            <ListItemIcon>\n              <FolderOpenIcon />\n            </ListItemIcon>\n            <ListItemText>\n              Open map from local file...\n            </ListItemText>\n          </MenuItem>\n          <Divider />\n          <MenuItem\n            onClick={() => {\n              save();\n              setMenuAnchorEl(null);\n            }}\n          >\n            <ListItemIcon>\n              <SaveIcon />\n            </ListItemIcon>\n            <ListItemText>\n              Save\n            </ListItemText>\n          </MenuItem>\n        </Menu>\n        <Typography variant=\"h6\" color=\"inherit\" className={classes.appTitle}>\n          Traffic Editor\n        </Typography>\n        <div className={classes.filler} />\n        <StyledToggleButtonGroup\n          value={activeTool}\n          size=\"small\"\n          exclusive\n          onChange={onToolChange}\n          aria-label=\"tool\"\n        >\n          <ToggleButton value={EditorToolID.SELECT}>\n            <Tooltip title=\"Select tool [Escape]\">\n              <PanToolIcon />\n            </Tooltip>\n          </ToggleButton>\n          <ToggleButton value={EditorToolID.MOVE}>\n            <Tooltip title=\"Move tool [m]\">\n              <OpenWithIcon />\n            </Tooltip>\n          </ToggleButton>\n        </StyledToggleButtonGroup>\n        <StyledToggleButtonGroup\n          value={editorMode}\n          size=\"small\"\n          exclusive\n          onChange={onModeChange}\n          aria-label=\"editor mode\"\n        >\n          <ToggleButton value=\"3d\">3D</ToggleButton>\n          <ToggleButton value=\"2d\">2D</ToggleButton>\n        </StyledToggleButtonGroup>\n      </ToolBar>\n      <OpenDialog\n        open={isOpenDialogOpen}\n        onOpen={() => setIsOpenDialogOpen(false)}\n        onCancel={() => setIsOpenDialogOpen(false)}\n      />\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'left',\n        }}\n        open={saveErrorOpen}\n        onClose={saveErrorClose}\n        autoHideDuration={2000}\n        transitionDuration={0}\n        TransitionProps={{\n          appear: false,\n        }}\n        action={\n          <React.Fragment>\n            <IconButton onClick={saveErrorClose}>\n              <CloseIcon />\n            </IconButton>\n          </React.Fragment>\n        }\n      >\n        <MuiAlert elevation={6} variant=\"filled\" severity=\"error\" onClose={saveErrorClose}>\n          {saveErrorMessage}\n        </MuiAlert>\n      </Snackbar>\n    </AppBar>\n  );\n}\n\n/*\n*/\n","import React from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\nimport BuildingSummary from './BuildingSummary';\nimport { EditorScene } from './EditorScene';\nimport PropertyEditor from './PropertyEditor';\nimport MainMenu from './MainMenu';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    flexGrow: 1,\n    minHeight: '100vh',\n  },\n  flex: {\n    flex: 1\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20\n  },\n  toolbarMargin: theme.mixins.toolbar,\n  workingArea: {\n    backgroundColor: \"black\",\n    height: `calc(100vh - 64px)`,\n  },\n  gridLeftColumn: {\n    borderRight: '5px',\n    borderRightStyle: 'solid',\n    borderRightColor: theme.palette.primary.main,\n  },\n  propertyGridItem: {\n    borderTop: '5px',\n    borderTopStyle: 'solid',\n    borderTopColor: theme.palette.primary.main,\n  }\n}));\n\nexport default function App(props: React.PropsWithChildren<{}>): JSX.Element {\n  const classes = useStyles(props);\n\n  return (\n    <div className={classes.root}>\n      <MainMenu />\n      <div className={classes.toolbarMargin} />\n      <Grid container spacing={0}>\n        <Grid className={classes.gridLeftColumn} container xs={3} direction=\"column\" spacing={0}>\n          <Grid item style={{height: '40vh', overflow: 'auto'}}>\n            <BuildingSummary />\n          </Grid>\n          <Grid item className={classes.propertyGridItem} style={{height: '40vh', overflow: 'auto'}}>\n            <PropertyEditor />\n          </Grid>\n        </Grid>\n        <Grid item xs={9} className={classes.workingArea}>\n          <EditorScene />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}